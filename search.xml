<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Git中文文件名不能正常显示]]></title>
      <url>/ckilas0hi002a0xqidv9pw98o/</url>
      <content type="html"><![CDATA[<h3 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h3><p>在git中我们使用git status查询文件修改状态时，对于中文的文件名没有办法正常显示，效果如下图所示；</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/GSCSDD-EDxrKo.png" alt="显示乱码" style="zoom:50%;"></p>
<p>经过查询资料和git的设置有些关系；</p>
<a id="more"></a>
<h3 id="开始修改"><a href="#开始修改" class="headerlink" title="开始修改"></a>开始修改</h3><p>目前我的电脑系统是macOS，Linux用户类似，windows用户由于文件的目录结构不同可能会有些不同，但是修改文件的内容是一样的；</p>
<p>我们可以修改Home目录中的.gitconfig文件，在文件的后面添加下面的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">    quotepath = false</span><br></pre></td></tr></table></figure>
<p>配置说明：<a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath" target="_blank" rel="noopener">https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath</a></p>
<p>修改完成后，重新打开shell，再执行git status发现，中文可以正常展示了。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/iVFA2u-uuYJ7m.png" alt="显示正常" style="zoom:50%;"></p>
<p>这样看起来就很舒服了。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://git-scm.com/docs/git-config" target="_blank" rel="noopener">https://git-scm.com/docs/git-config</a>  </li>
<li><a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath" target="_blank" rel="noopener">https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[macOS设置nginx代理支持解析PHP]]></title>
      <url>/ckilas0i1003j0xqiy2ykuzgk/</url>
      <content type="html"><![CDATA[<p>在开发时候，我们有时候需要给自己的机器配置一个域名，例如有三方认证的场景，回调地址不会是localhost。所以我们启动服务器的时候会从80端口上运行，然后我们使用webpack-dev-server的时候，只能启动一个项目到80端口上，所以我们可以使用nginx反向代理的方式对url进行处理。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www.webrepos.cn/blog    http://localhost:8001</span><br><span class="line">www.webrepos.cn/bbs     http://localhost:8002</span><br><span class="line">www.webrepos.cn/cms     http://localhost:8003</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后开发时期，我们在本地配置host文件，写入下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   www.webrepos.cn</span><br></pre></td></tr></table></figure>
<p>然后我们启动本地的nginx服务器就会代理我们上面的地址，我们在nginx对location做一个代理就可以实现转发到不同的环境上了，并且登录的回调也是没有问题的。</p>
<p>使用nginx做反向代理，解析php文件，结合webpack-derv-server简直不要很爽啊。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装nginx和php，此处使用brew来安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx php</span><br></pre></td></tr></table></figure>
<p>1、配置php-fpm：</p>
<p>打开php-fpm的配置文件，如果没有就复制下默认的配置文件；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 的目录存在php-fpm.conf文件，直接跳过上面的步骤即可。下面的PHP版本和自己安装的一致</span></span><br><span class="line">sudo cp /usr/<span class="built_in">local</span>/etc/php/7.2/php-fpm.conf.default /usr/<span class="built_in">local</span>/etc/php/7.2/php-fpm.conf</span><br></pre></td></tr></table></figure>
<p>修改配文件；</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; Error log file</span><br><span class="line">; <span class="keyword">If</span> it<span class="string">'s set to "syslog", log is sent to syslogd instead of being written</span></span><br><span class="line"><span class="string">; into a local file.</span></span><br><span class="line"><span class="string">; Note: the default prefix is /usr/local/var</span></span><br><span class="line"><span class="string">; Default Value: log/php-fpm.log</span></span><br><span class="line"><span class="string">; 下面的这一行默认是加上注释的，就是前面有个分号，直接删除，并修改城下面的值就可以了</span></span><br><span class="line"><span class="string">error_log = /usr/local/var/log/php-fpm.log</span></span><br></pre></td></tr></table></figure>
<p>保存就好了。</p>
<p>2、配置下nginx，让其可以将php文件交由php-fpm来解析：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有的话就拷贝一份nginx.conf.default，命名为nginx.conf</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>在nginx对应的服务器部分加上下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">        # 这里的root需要按照你的要求进行配置，主要是描述的你的php存在的位置。</span><br><span class="line">        root           /Users/admin/Source;</span><br><span class="line">        # 注意这个名字一定要修改下，修改成$document_root才可以</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、我们启动下php-fpm，直接在命令行执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/Cellar/php/7.2.5/sbin/php-fpm</span><br><span class="line"><span class="comment"># 根据自己安装的来启动，注意版本重新加载下我们nginx服务器配置文件就可以了</span></span><br><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<p>大功告成；</p>
]]></content>
      
        <categories>
            
            <category> macOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QQ二次分享H5卡片内容]]></title>
      <url>/ckilas0gv000y0xqiq7yi00uf/</url>
      <content type="html"><![CDATA[<p> 我们H5页面在QQ里面打开后，点击QQ右上角分享到好友，会展示下面的样式</p>
 <a id="more"></a>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/d6ae3e6f-56QaPW.png" alt></p>
<p>下面的链接以及右边的配图，给其他用户的感觉是不可信，类似垃圾链接等，用户点击的欲望不会很强烈。所以我们需要将分享的链接气泡正规化，下面是一个正常的案例</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/df93ce5c-E6TWBP.png" alt></p>
<p>我们需要在html中加入下面的，让QQ内置浏览器在分享的时候读取</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>好友默契大考验！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">content</span>=<span class="string">"好友默契大考验！"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"name"</span> <span class="attr">content</span>=<span class="string">"好友默契大考验！"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"好友默契大考验，这段是描述"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> <span class="attr">content</span>=<span class="string">"缩略图"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在QQ中，上述的meta标签甚至可以使用js在页面中生成，这对于多语言需求的页面比较实用；</p>
<p>如果发现问题，请在下方回复。</p>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/qq_41725450/article/details/100891853" target="_blank" rel="noopener">https://blog.csdn.net/qq_41725450/article/details/100891853</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[页面中PNG图片优化]]></title>
      <url>/ckilas0jq00740xqio8pv3eyl/</url>
      <content type="html"><![CDATA[<p>活动页面中例如页面背景等图片的尺寸都是很大的，png的尺寸一般是的100+kb，导致加载比较慢；</p>
<p>现在我们的方案就是在支持webp的浏览器中使用webp作为背景图减少体积，虽然webp是有损压缩，但是还可以接受；</p>
<a id="more"></a>
<h2 id="实现方案："><a href="#实现方案：" class="headerlink" title="实现方案："></a>实现方案：</h2><p>转换之前的png先使用tinypng (<a href="https://tinypng.com" target="_blank" rel="noopener">https://tinypng.com</a>) 做一次压缩，再去转换；（为了减少转换次数，因为转换网站要排队比较慢，当然这里我们也可以在 <a href="https://tinypng.com/third-party" target="_blank" rel="noopener">https://tinypng.com/third-party</a> 下载TinyPNG本地的客户端+Token，每月免费压缩500张图片）</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/9b94c0d4-g2TQnQ.png" alt></p>
<p>1、将png转换成webp，可以使用转换网站：<a href="https://cloudconvert.com/png-to-webp" target="_blank" rel="noopener">https://cloudconvert.com/png-to-webp</a></p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/be937cd8-yHhRlo.png" alt></p>
<p>2、在项目中判断浏览器是否支持png，然后在全局添加class样式，再针对class样式我们替换对应的背景图片即可；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码放到html的最上面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_support_webp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>).toDataURL(<span class="string">'image/webp'</span>).indexOf(<span class="string">'data:image/webp'</span>) == <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 参考：https://blog.csdn.net/jesslu/article/details/82495061</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在html节点上添加class标识，这段代码必须在项目启动之前进行执行，保证不加载png图片</span></span><br><span class="line"><span class="keyword">if</span> (check_support_webp()) &#123;</span><br><span class="line">    $(<span class="string">'html'</span>).addClass(<span class="string">'sup-webp'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、css使用示例；</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#212643</span> url(<span class="string">"../images/background.png"</span>) no-repeat center top;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.sup-webp</span> <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"../images/background.webp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Less使用示例，其他的类似使用&amp;嵌套就可以了（活动的同学需要看看和多语言的class是不是在同级）；</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#212643</span> url(<span class="string">"../images/background.png"</span>) no-repeat center top;</span><br><span class="line">    <span class="selector-class">.sup-webp</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(<span class="string">"../images/background.webp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack配置修改 scripts/webpack.common.js 中url-loader正则匹配修改成下面的内容，加上webp： </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpe?g|gif|svg|ttf|woff2|eot|woff|mp3|mp4|swf|webp)(\?.*)?$/i</span>,</span><br><span class="line">    loader: <span class="string">'url-loader'</span>, <span class="comment">// 小于3k, 转成base64</span></span><br><span class="line">    options: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: <span class="string">'assets/media/[name].[hash:5].[ext]'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、有些图片转换以后比png大，请不要替换；</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将proto文件转化成js文件输出]]></title>
      <url>/ckilas0jb00620xqif9ircmqn/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做这个的时候，是因为在做项目的时候，会有一些proto（Google  Protobuf）文件，这些pb文件有时候会更新。如果每次我们人肉的去用pbjs（将proto文件转换成js文件的工具）转的话，比较麻烦。所以我干脆做个简单的工具直接调用下就可以了，一切按照配置走的。</p>
<p>注意：转pb的时候，对应的pb文件夹需要有google文件夹（谷歌内置的类型文件），否则可能会转换不成功或者报错。</p>
<p>google内置文件下载地址：<a href="https://gitee.com/fqzhang/google-pbs" target="_blank" rel="noopener">https://gitee.com/fqzhang/google-pbs</a></p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>已经发布到了npm上，可以直接安装使用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pb2js protobufjs -g</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目的文件夹创建一个对应的配置文件 pb2js.config.json ，写上pb文件对应的目录和文件名称，详细配置例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;output&quot;: &quot;js/pb&quot;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;basePath&quot;: &quot;/Users/app/Source/protobuf&quot;,</span><br><span class="line">      &quot;protos&quot;: [</span><br><span class="line">        &quot;G.proto&quot;,</span><br><span class="line">        &quot;H.proto&quot;,</span><br><span class="line">        &quot;I.proto&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;basePath&quot;: &quot;/Users/app/Source/protobuf/tts&quot;,</span><br><span class="line">      &quot;protos&quot;: [</span><br><span class="line">        &quot;A.proto&quot;,</span><br><span class="line">        &quot;B.proto&quot;,</span><br><span class="line">        &quot;C.proto&quot;,</span><br><span class="line">        &quot;D.proto&quot;,</span><br><span class="line">        &quot;E.proto&quot;,</span><br><span class="line">        &quot;F.proto&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件分为两部分：</p>
<ul>
<li>output {String} 输出pb.js文件的路径，是相对于当前配置文件的路径。</li>
<li>files {Array{Object}} 配置的文件序列的块，主要是解决pb分布在好多目录的情况。<ul>
<li>basePath {String} pb文件的目录</li>
<li>protos {Array} basePath下的pb文件名称</li>
</ul>
</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pb2js</span><br><span class="line"> </span><br><span class="line">成功：/Users/app/Source/app/js/pb/a.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/b.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/c.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/d.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/e.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/f.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/g.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/h.pb.js</span><br><span class="line">成功：/Users/app/Source/app/js/pb/i.pb.js</span><br></pre></td></tr></table></figure>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实就是根据配置文件遍历执行了pbjs的命令，进行批量执行下面的命令实现的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbjs -t js -p ../ xx.proto &gt; xx.js &amp;&amp; echo &quot;export default _root;&quot; &gt;&gt; xx.js</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mixpanel打点不生效]]></title>
      <url>/ckilas0hz003f0xqic5zrybt4/</url>
      <content type="html"><![CDATA[<p>使用了mixpanel打点，但是在后端没有查询到打点的数据，页面也没有发送打点的请求，通过查询相关资料发现，浏览器禁用了跟踪的设置；</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/6C4C8760-E5FE-440A-9B2F-14DAF20E33DE-4cvSsK.png" alt></p>
<p>在控制台执行mixpanel.track()也不会发送请求</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> mixpanel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack将css和js文件内容输出到html]]></title>
      <url>/ckilas0i900410xqim824a49q/</url>
      <content type="html"><![CDATA[<p>对于小的项目，我们将css文件和js文件可以直接内联插入到html中，可以减少两次请求，达到优化的效果；当然比较大的项目我们可以注入一些公共的样式和js文件的到html中；</p>
<p>我们使用html-webpack-plugin的插件</p>
<p><a href="https://github.com/DustinJackson/html-webpack-inline-source-plugin" target="_blank" rel="noopener">https://github.com/DustinJackson/html-webpack-inline-source-plugin</a></p>
<a id="more"></a>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>首先安装内联文件的插件；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-inline-source-plugin</span><br></pre></td></tr></table></figure>
<p>修改webpack配置；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackInlineSourcePlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-inline-source-plugin’);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 注意插件的参数是加在HtmlWebpackPlugin上的，不是插件上的</span></span><br><span class="line"><span class="string">module.export = &#123;</span></span><br><span class="line"><span class="string">    plugins: [</span></span><br><span class="line"><span class="string">      new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="string">          // 这里我会注入所有的css和js到html中，也可以根据需求修改正则，只注入部分文件</span></span><br><span class="line"><span class="string">          inlineSource: '</span>.(js|css)$<span class="string">' </span></span><br><span class="line"><span class="string">      &#125;),</span></span><br><span class="line"><span class="string">      new HtmlWebpackInlineSourcePlugin()</span></span><br><span class="line"><span class="string">    ] </span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>这里如果要注入css内容，还是需要使用插件（mini-css-extract-plugin）先将css文件抽离才可以注入到html文件中的；</li>
<li>因为这个插件是基于html-webpack-plugin，所以，html-webpack-plugin是必须要使用的，否则会报错。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://github.com/DustinJackson/html-webpack-inline-source-plugin" target="_blank" rel="noopener">https://github.com/DustinJackson/html-webpack-inline-source-plugin</a> </li>
<li><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">https://github.com/jantimon/html-webpack-plugin</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React长列表详情返回后保留位置]]></title>
      <url>/ckilas0h000170xqiwb57y2xi/</url>
      <content type="html"><![CDATA[<p>在React项目中我们从列表点击到详情页面，再返回的时候，会回到列表的顶部，用户体验比较差；</p>
<p>适用环境：</p>
<ul>
<li>列表页面使用的iscroll</li>
<li>列表使用的分页加载，及上划加载下一页</li>
<li>在列表页的任意位置点击到详情</li>
<li>返回到列表要定位到点击之前的滚动条位置</li>
</ul>
<a id="more"></a>
<p>我们可以借助localStorage存储返回之前的位置，返回的时候重新数据并且滚动到对应的位置，详细实现如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 处理兼容性，获取滚动的距离</span></span><br><span class="line"><span class="comment">// 获取滚动条的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> supportPageOffset = <span class="built_in">window</span>.pageXOffset !== <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> isCSS1Compat = ((<span class="built_in">document</span>.compatMode || <span class="string">""</span>) === <span class="string">"CSS1Compat"</span>);</span><br><span class="line">    <span class="keyword">return</span> supportPageOffset ? <span class="built_in">window</span>.pageYOffset : isCSS1Compat ? <span class="built_in">document</span>.documentElement.scrollTop : <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每页分页的大小</span></span><br><span class="line"><span class="keyword">const</span> pageSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        list: [],</span><br><span class="line">        <span class="comment">// 当前页面</span></span><br><span class="line">        currentPage: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 是否首次加载</span></span><br><span class="line">        firstLoad: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 在点击到详情之前，列表的长度，方面下次取该长度的数据</span></span><br><span class="line">        lastLength: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    getListData()&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> &#123;currentPage, list, firstLoad, lastLength&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">let</span> size = pageSize;</span><br><span class="line">        <span class="comment">// 检查本地是否存储了，点击之前的位置信息</span></span><br><span class="line">        <span class="keyword">let</span> pos = localStorage.getItem(<span class="string">'list_pos'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pos) &#123;</span><br><span class="line">            pos = <span class="built_in">JSON</span>.parse(pos);</span><br><span class="line">            <span class="comment">// 当前页</span></span><br><span class="line">            currentPage = pos.currentPage;</span><br><span class="line">            <span class="comment">// 上次离开时候页面的长度</span></span><br><span class="line">            lastLength = pos.pageLength;</span><br><span class="line">            <span class="comment">// 上次来开时滚动条的位置</span></span><br><span class="line">            top = pos.top;</span><br><span class="line">            <span class="comment">//  清理缓存</span></span><br><span class="line">            localStorage.removeItem(<span class="string">'list_pos'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  表示在详情界面返回的，需要处理</span></span><br><span class="line">        <span class="keyword">let</span> isDetailBack = top !== <span class="literal">undefined</span> &amp;&amp; firstLoad;</span><br><span class="line">        <span class="keyword">if</span> (isDetailBack) &#123;</span><br><span class="line">            currentPage = <span class="number">1</span>;</span><br><span class="line">            size = lastLength;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         fetchData(&#123;<span class="attr">page</span>: currentPage, <span class="attr">pageSize</span>: lastLength&#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//  window.scrollTo(0, top);</span></span><br><span class="line">             <span class="comment">// 如果使用的iscroll，滚动到对应的位置上</span></span><br><span class="line">             scroll.scrollTo(<span class="number">0</span>, <span class="built_in">Number</span>(top));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goDetail(id) &#123;</span><br><span class="line">        <span class="comment">// 存储当前页面scrollTop和页面的条数</span></span><br><span class="line">        <span class="keyword">const</span> &#123;currentPage, list&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">const</span> data = &#123;</span><br><span class="line">            <span class="comment">// 当前页，返回的使用</span></span><br><span class="line">            currentPage,</span><br><span class="line">            <span class="comment">// 当前的top</span></span><br><span class="line">            top: <span class="keyword">this</span>.scroll.y || getScrollTop(),</span><br><span class="line">            <span class="comment">// 当前拉取的数据长度</span></span><br><span class="line">            pageLength: list.length</span><br><span class="line">        &#125;;</span><br><span class="line">        localStorage.setItem(<span class="string">'list_pos'</span>, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">        router.push(<span class="string">'/detail/'</span> + id );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际的实现步骤：</p>
<ol>
<li>保存当前的页码，列表数据长度，滚动位置；</li>
<li>跳转到详情页面；</li>
<li>返回检查是否有第一步保存的数据；</li>
<li>有就获取列表数据长度和滚动位置；</li>
<li>请求列表长度数量的数据；</li>
<li>渲染列表，滚动位置，清理掉第一步保存的数据；</li>
<li>完成。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack4升级指南]]></title>
      <url>/ckilas0ib00450xqiugukmo75/</url>
      <content type="html"><![CDATA[<p>因为webpack4有很多吸引人的特性，在开发的时候能能提高效率，所以将团队项目的webpack3升级到了webpack4；</p>
<h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><ol>
<li>对Node.js版本必须&gt;=8.9.4；</li>
<li>支持WebAssembly；</li>
<li>支持多种模块类型；</li>
<li><a href="https://webpack.js.org/configuration/mode/#usage" target="_blank" rel="noopener">通过mode来处理开发环境和线上环境优化</a>；</li>
<li><a href="https://webpack.js.org/guides/code-splitting/#entry-points" target="_blank" rel="noopener">更简单配置的拆包功能；</a></li>
<li><a href="https://webpack.js.org/guides/hot-module-replacement/#enabling-hmr" target="_blank" rel="noopener">更快的热加载功能；</a></li>
<li>零配置模块打包（output:./dist/main.js；entry:./src/index.js）；</li>
<li>更快的构建时间，大项目及其可观；</li>
<li>全新的插件系统，插件优化替换；</li>
</ol>
<a id="more"></a>
<h3 id="插件变化"><a href="#插件变化" class="headerlink" title="插件变化"></a>插件变化</h3><ol>
<li>nameModulesPlugin =&gt; optimization.nameModules；</li>
<li>noEmitOnErrorsPlugin =&gt; optimization.noEmitOnErrors；</li>
<li>CommonsChunkPlugin =&gt; optimization.splitChunks；</li>
<li>UglifyJsPlugin =&gt;webpack-parallel-uglify-plugin；</li>
<li>extract-text-webpack-plugin =&gt; mini-css-extract-plugin；</li>
</ol>
<h3 id="开始升级"><a href="#开始升级" class="headerlink" title="开始升级"></a>开始升级</h3><p>1、首先我们要将webpack相关的升级到最新的版本，此处是我本次升级的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;webpack&quot;: &quot;^4.30.0&quot;,</span><br><span class="line">&quot;webpack-cli&quot;: &quot;^3.3.1&quot;,</span><br><span class="line">&quot;webpack-dev-server&quot;: &quot;^3.3.1&quot;</span><br></pre></td></tr></table></figure>
<p>2、相关的loader升级一下版本，以下面的Loader为例，其他的请查询文档</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;file-loader&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;style-loader&quot;: &quot;0.23.0&quot;,</span><br><span class="line">&quot;url-loader&quot;: &quot;1.1.1&quot;,</span><br><span class="line">&quot;postcss-loader&quot;: &quot;3.0.0&quot;,</span><br></pre></td></tr></table></figure>
<p>3、插件升级</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;mini-css-extract-plugin&quot;: &quot;^0.6.0&quot;,  // 替代一下抽取样式的 extract-text-webpack-plugin</span><br><span class="line">&quot;string-replace-webpack-plugin&quot;: &quot;^0.1.3&quot;,</span><br></pre></td></tr></table></figure>
<p>4、升级webpack配置文件，下面是变更了的内容</p>
<ul>
<li>css加载开发时期使用style-loader，发布事情使用mini-css-extract-plugin抽取到css文件；</li>
<li>plugins删除ExtractTextWebpackPlugin，使用MiniCssExtractPlugin代替；</li>
<li>根节点添加mode属性，开发时期使用development，发布时期使用production（会有一些优化）；</li>
<li>module节点中使用rules替换loaders，webpack4不支持使用loaders了；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="comment">// 声明cssloader</span></span><br><span class="line"><span class="keyword">const</span> cssLoader = &#123;</span><br><span class="line">    test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        <span class="string">'css-loader'</span>,</span><br><span class="line">        <span class="string">'postcss-loader'</span>,</span><br><span class="line">        <span class="string">'less-loader'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开发模式使用style-loader</span></span><br><span class="line"><span class="keyword">if</span> (!env) &#123;</span><br><span class="line">    cssLoader.use.unshift(<span class="string">'style-loader'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cssLoader.use.unshift(&#123;</span><br><span class="line">        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">        options: &#123;<span class="attr">hmr</span>: !env, <span class="attr">reloadAll</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: env ? <span class="string">'production'</span> : <span class="string">'development'</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            cssLoader</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'assets/[name].css'</span>,</span><br><span class="line">            chunkFilename: <span class="string">'assets/[name].[contenthash:8].chunk.css'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>参考文档：</p>
<ul>
<li><a href="https://webpack.js.org/configuration/#options" target="_blank" rel="noopener">https://webpack.js.org/configuration/#options</a></li>
<li><a href="https://webpack.js.org/guides/getting-started/#basic-setup" target="_blank" rel="noopener">https://webpack.js.org/guides/getting-started/#basic-setup</a></li>
<li><a href="https://segmentfault.com/a/1190000014685887" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014685887</a></li>
<li><a href="https://juejin.im/post/5bd03659e51d457aa63a66c8#heading-0" target="_blank" rel="noopener">https://juejin.im/post/5bd03659e51d457aa63a66c8#heading-0</a></li>
<li><a href="https://segmentfault.com/a/1190000013608316" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013608316</a></li>
<li><a href="https://www.cnblogs.com/cherryvenus/p/9808320.html" target="_blank" rel="noopener">https://www.cnblogs.com/cherryvenus/p/9808320.html</a></li>
<li><a href="https://www.jianshu.com/p/7a5f6cffdd87" target="_blank" rel="noopener">https://www.jianshu.com/p/7a5f6cffdd87</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[滚动到底部加载下一页实现]]></title>
      <url>/ckilas0jg006g0xqizvmah1mg/</url>
      <content type="html"><![CDATA[<p>随着网页风格的变化，许多分页方式使用了，上拉或者滚动加载下一页的方式，这样即减少了后端计算总数的过程，也为前端提供了新的交互方式。</p>
<p><strong>下面是常见的滚动加载的实例；</strong></p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isLoading = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>callback &#123;Function&#125; 混动以后的回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> scrollListener = <span class="function">(<span class="params">callback = e =&gt; e</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 防止多次触发事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 此处针对部分浏览器需要特殊处理一下</span></span><br><span class="line">    <span class="keyword">const</span> docElement = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">let</span> scrollTop = docElement.scrollTop;</span><br><span class="line">    <span class="comment">// 700 在页面滑到底部前700px就可以加载,增加交互流畅性</span></span><br><span class="line">    <span class="comment">// 刚刚滑到底部的情况： docElement.scrollTop + docElement.clientHeight = docElement.offsetHeight;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.pageYOffset !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        scrollTop = <span class="built_in">window</span>.pageYOffset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scrollTop &gt; docElement.offsetHeight - docElement.clientHeight - <span class="number">700</span>) &#123;</span><br><span class="line">      	isLoading = <span class="literal">true</span>;</span><br><span class="line">        callback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// window 注册滚动事件，可以后续使用节流减少事件的触发</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, scrollListener);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Service Account读取谷歌表格]]></title>
      <url>/ckilas0hj002d0xqi993un5nf/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着谷歌表格API升级到第四个版本以后，虽然提供了更快的表格数据读取API，但是还有就是需要授权才能读取到数据，即使是发布到网络的表格。所以我们在做这一升级的时候，尝试了很多的方法，也走过了很多的坑，下面我就简单总结一下。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>首先我找到了读取表格数据的API 接口：</p>
<p><a href="https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get" target="_blank" rel="noopener">https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get</a></p>
<p>该接口需要的参数如下（必传的参数）：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"spreadsheetId"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"range"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"access_token"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用过的朋友都知道，spreadsheetId和range是表格的id和表格的tab范围。但是<code>access_token</code>并不是一个固定的东西，所以我研究了google获取<code>access_token</code>的两种方式（都是基于OAuth 2.0的）：</p>
<ol>
<li>使用用户自己的账号，简单来讲就是通知用户授权，然后用户确认后可以拿到用户的<code>access_token</code>读取该用户拥有读取权限的表格数据。</li>
<li>使用服务账号，将表格共享给这个谷歌账号，然后使用服务器登录服务账号，获取服务账号的<code>access_token</code>读取表格数据。</li>
</ol>
<p>刚开始的时候我使用了第一种方式，但是出现了下面的缺点：</p>
<ol>
<li>需要写死一个账号，每次都是用这个账号进行授权。</li>
<li><code>access_token</code> 的有效期很短（一般是两个小时），隔一段时间需要手动授权，需要人工的干预。</li>
<li>要是哪天我的账号被删除了就需要重新设置新的账号，并生成新的项目配置。 </li>
</ol>
<p>后来看到谷歌在服务器授权的时候，建议使用<a href="https://cloud.google.com/docs/authentication/production" target="_blank" rel="noopener">服务账号</a>(虽然<a href="https://cloud.google.com/docs/authentication/api-keys?visit_id=636920356780779061-2124749678&amp;rd=1" target="_blank" rel="noopener">API KEY</a>也可以)，就实现了服务端无用户参与的授权。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="一、创建一个项目"><a href="#一、创建一个项目" class="headerlink" title="一、创建一个项目"></a>一、创建一个项目</h3><p>在开发者控制台创建一个项目<br>link：<a href="https://console.developers.google.com/projectcreate" target="_blank" rel="noopener">https://console.developers.google.com/projectcreate</a></p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/create.png" alt></p>
<p>填写完必要的信息后，直接点击创建即可（注意项目的id不能修改）。</p>
<h3 id="二、开通Google-Sheet-API服务"><a href="#二、开通Google-Sheet-API服务" class="headerlink" title="二、开通Google Sheet API服务"></a>二、开通Google Sheet API服务</h3><p>在创建完账号以后就会跳转到该项目的dashboard，如下面的视图，直接在搜索框搜索Google Sheet API，如果不开启创建的服务账号是没有权限读取表格数据的。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/api-dashboard.png" alt></p>
<p>在API页面直接点击启用即可开启该项目的Sheet API功能。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/api-confirm-aHeIUT.png" alt></p>
<h3 id="三、生成一个服务账号"><a href="#三、生成一个服务账号" class="headerlink" title="三、生成一个服务账号"></a>三、生成一个服务账号</h3><p>开启Sheet API以后会跳转到Sheet API的配置页面，我们现在为这个项目创建一个服务账号。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/d50bbe99-AVNL0u.png" alt></p>
<p>首先按照标记点击”凭据”，然后点击”API与服务中的凭据”来创建服务账号。</p>
<p>我们在这里选择创建”服务账号密钥”;</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/e8481653-CVJyM5.png" alt></p>
<h3 id="四、生成凭据"><a href="#四、生成凭据" class="headerlink" title="四、生成凭据"></a>四、生成凭据</h3><p>点击上面的”服务账号密钥”跳转到了密钥创建页面，我们选择新的服务账号，根据自己的要求进行填写，如下所示。</p>
<p>这里我选择了JSON格式，方便Node.js（<em>本次以Node.js作为实践</em>）读取；</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/96550c00-MElu5R.png" alt></p>
<p>点击创建以后我们会得到一个json文件，注意改json文件一定要保存好了，后面的授权全靠它了。</p>
<p>接下来就开始编码实现读取的功能了;</p>
<h3 id="五、开始编码"><a href="#五、开始编码" class="headerlink" title="五、开始编码"></a>五、开始编码</h3><p>下面是Node.js作为实现，首先需要安装googleapis。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install googleapis --save</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;google&#125; = <span class="built_in">require</span>(<span class="string">'googleapis'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后面的json文件就是我们在上面第四步下载的json文件。 </span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">client_email</span>: email, <span class="attr">private_key</span>: key&#125; = <span class="built_in">require</span>(<span class="string">'./service-account.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定权限，这里仅需要读取权限就可以了</span></span><br><span class="line"><span class="keyword">const</span> scopes = [<span class="string">'https://www.googleapis.com/auth/spreadsheets.readonly'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局存储授权后的token信息，后面也可以存储到redis等缓存中，现在为了测试，我就存储在本地的变量中</span></span><br><span class="line"><span class="keyword">let</span> token = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    authorize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 首先判断有没有token文件</span></span><br><span class="line">            <span class="keyword">if</span> (token) &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123;access_token, expiry_date&#125; = token;</span><br><span class="line">                <span class="comment">// 看看有没有过期 + 1分钟</span></span><br><span class="line">                <span class="keyword">if</span> (expiry_date &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">60</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> resolve(access_token);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 重新授权</span></span><br><span class="line">            <span class="keyword">let</span> jwtClient = <span class="keyword">new</span> google.auth.JWT(email, <span class="literal">null</span>, key, scopes);</span><br><span class="line">            <span class="comment">// 直接可以获取到access_token，很方便，不需要人工干预</span></span><br><span class="line">            jwtClient.authorize().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 保存token到全局变量</span></span><br><span class="line">                token = data;</span><br><span class="line">                <span class="comment">// 返回token</span></span><br><span class="line">                resolve(data.access_token)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                resolve(<span class="string">''</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后我们通过上面的authorize可以取到token信息，最后使用ajax客户端来调用表格的接口，即可实现数据的读取。</p>
<p>为了保证隐私，我没有上传项目配置的json文件；</p>
<p>参考git实现：<a href="https://github.com/gslnzfq/develop-tools-server" target="_blank" rel="noopener">https://github.com/gslnzfq/develop-tools-server</a></p>
<h3 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h3><p>如果读取数据的时候，google返回了403，那可能是因为你没有将表格共享给服务账号，查看服务账号：</p>
<p><a href="https://console.developers.google.com/iam-admin/serviceaccounts" target="_blank" rel="noopener">https://console.developers.google.com/iam-admin/serviceaccounts</a></p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/4f2ec554-9lhCqt.png" alt></p>
<p>在上面选择你的项目，就能看到右边的电子邮件，将谷歌表格共享给改邮箱就可以访问了。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://console.developers.google.com/projectcreate" target="_blank" rel="noopener">https://console.developers.google.com/projectcreate</a></li>
<li><a href="https://developers.google.com/identity/protocols/OAuth2?hl=zh_CN" target="_blank" rel="noopener">https://developers.google.com/identity/protocols/OAuth2?hl=zh_CN</a></li>
<li><a href="https://developers.google.com/sheets/api/guides/authorizing" target="_blank" rel="noopener">https://developers.google.com/sheets/api/guides/authorizing</a></li>
<li><a href="https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get" target="_blank" rel="noopener">https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get</a></li>
<li><a href="https://developers.google.com/apis-explorer/#p/sheets/v4/sheets.spreadsheets.values.get" target="_blank" rel="noopener">https://developers.google.com/apis-explorer/#p/sheets/v4/sheets.spreadsheets.values.get</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在webpack4中module.exports导出的对象上属性丢失的问题]]></title>
      <url>/ckilas0i2003n0xqi2ywoi1vf/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用了webpack4，在复用以前的commonjs的模块时，发现对象上的属性丢失了，示例代码如下所示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="variable">string</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test.name = <span class="string">'test'</span>;</span><br><span class="line">Test.addr = <span class="string">'Beijing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Test;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后在其他的文件中引入该模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(Test);</span><br></pre></td></tr></table></figure>
<p>在控制台查看，Test的name属性和addr属性不见了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-add-module-exports -D</span><br></pre></td></tr></table></figure>
<p>修改.babelrc，在插件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;react-app&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;add-module-exports&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该问题还在跟进，目前方案还在整理。</p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React中路由跳转到同一个组件数据不刷新]]></title>
      <url>/ckilas0k7007w0xqizeqfdiye/</url>
      <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在使用React开发的时候，有时候我们可能会跳转路由了但是渲染的的是同一个组件，这样就导致路由跳转了，但是页面还是复用的之前的，没有刷新。</p>
<p><strong>具体场景如下：</strong></p>
<p>路由跳转使用的同一个组件，都使用的是Profile组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /profile/10 -&gt; /profile/11</span></span><br></pre></td></tr></table></figure>
<p>相关代码</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Profile uid=&#123;uid&#125; onOpenProfile=&#123;<span class="keyword">this</span>.goProfile.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br></pre></td></tr></table></figure>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>主要是因为我们请求用户信息数据的方法写在了componentDidMount()生命周期（该生命周期只会在组件挂载的时候执行一次）中，导致了修改属性uid并不会重新拉取用户的数据，给用户一种没有刷新的感觉。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>1、在跳转的时候给组件带上一个key，这样就每次都可以创建新的组件了（需要修改路由表）。</p>
<p>2、我们在Profile组件中监听一下uid的变化，重新加载用户数据，实现刷新（只需要修改组件本身，<strong>推荐</strong>）。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1、使用React-Router3，Router上的一个属性，可以手动渲染一个组件，具体实现如下（此处的userId是唯一的，所以能保证每次都是有的是最新的组件）。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;hashHistory, Route, Router&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;CreateGiftItem, Earnings, Land, Profile, Project, ProjectDetail&#125; <span class="keyword">from</span> <span class="string">'./host-views'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> createElement = <span class="function">(<span class="params">Component, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;userId&#125; = ownProps.routeParams;</span><br><span class="line">        <span class="keyword">switch</span> (Component) &#123;</span><br><span class="line">            <span class="comment">// Profile 不能是异步组件</span></span><br><span class="line">            <span class="keyword">case</span> Profile:</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">key</span>=<span class="string">&#123;userId&#125;</span> &#123;<span class="attr">...ownProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...ownProps</span>&#125;/&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Router history=&#123;hashHistory&#125; createElement=&#123;App.createElement&#125;&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"/"</span> getComponent=&#123;Land&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"/createitem/:step(/:id)"</span> component=&#123;CreateGiftItem&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"/project"</span> getComponent=&#123;Project&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"/project/detail/:id"</span> getComponent=&#123;ProjectDetail&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"/profile(/:userId)"</span> getComponent=&#123;Profile&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"/earnings(/:userId)"</span> getComponent=&#123;Earnings&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">"*"</span> getComponent=&#123;Land&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意，看上面的代码实现，要手动渲染的组件不能是异步组件。</p>
<p>2、修改Profile组件，修改了uid我们重新刷新数据；</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  componentWillReceiveProps(nextProps, nextContext)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.uid !== nextProps.uid) &#123;</span><br><span class="line">      <span class="comment">// uid变化以后重新加载用户信息</span></span><br><span class="line">      <span class="keyword">this</span>.loadUserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS搭建支持https的nginx服务器]]></title>
      <url>/ckilas0hx003b0xqifu5a6sn2/</url>
      <content type="html"><![CDATA[<p>作者原文: <a href="https://www.cnblogs.com/chenguoli/p/7845578.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenguoli/p/7845578.html</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在本地进行项目使用nginx代理开发时，为了完全的模拟线上的环境，我们本地也需要使用https来运行，我们会在本地创建https的相关证书进行配置。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>大家已经安装好了nginx吧，此处就不多说了，我用的是brew安装的nginx</p>
<p>首先我们找到我们安装nginx的配置文件的目录：/usr/local/etc/nginx</p>
<p>现在我们需要生成下面的四个文件：</p>
<ul>
<li>private.key</li>
<li>server.crt</li>
<li>server.csr</li>
<li>server.key</li>
</ul>
<a id="more"></a>
<p>1、生成私钥</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -des3 -out private.key 2048</span><br></pre></td></tr></table></figure>
<p>2、生成证书请求</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key private.key -out server.csr</span><br></pre></td></tr></table></figure>
<p>3、生成服务器的私钥，去除密钥口令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> private.key -out server.key</span><br></pre></td></tr></table></figure>
<p>4、使用私钥为证书请求签名，生成给服务器签署的证书，格式是x509的PEM格式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl x509 -req -<span class="keyword">in</span> server.csr -out server.crt -signkey server.key -days 3650</span><br></pre></td></tr></table></figure>
<p>5、nginx配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 同时监听了80和443，网站可以使用http和https都可以访问了</span><br><span class="line">    listen 80;  # http端口监听</span><br><span class="line">    listen 443 ssl; # https端口监听</span><br><span class="line"></span><br><span class="line">    server_name fqzhang.cn;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    # ssl配置</span><br><span class="line">    ssl_certificate /data/crt/server.crt;</span><br><span class="line">    ssl_certificate_key /data/crt/server.key;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite . /index.php last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 下面是PHP的配置，需要安装和启动php-fpm才能使用</span><br><span class="line">    location = /index.php &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /data/www/blog/index.php;</span><br><span class="line">        fastcgi_param SCRIPT_NAME /data/www/blog/index.php;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>使用自定义证书支持的https服务器，在网站访问时，可能会出现不安全的提示，这个后面文章会继续研究，具体表现如下图所示：</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/81bce89d-xS1xDc.png" alt></p>
]]></content>
      
        <categories>
            
            <category> macOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swiper常见使用以及问题整理]]></title>
      <url>/ckilas0jw007s0xqihkpr96j9/</url>
      <content type="html"><![CDATA[<p>swiper中文API：<a href="https://www.swiper.com.cn/api/index.html" target="_blank" rel="noopener">https://www.swiper.com.cn/api/index.html</a></p>
<p>1、实现下面的布局(主要看左右两边的)</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/33819adb-OKAEG8.png" alt><br><a id="more"></a><br>上面的例子看出，中间部分居中在页面水平中央，两边显示一小部分,下面是关键代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newsSwiper = <span class="keyword">new</span> Swiper(<span class="string">'#newsSwiper'</span>, &#123;</span><br><span class="line">    <span class="comment">//  循环展示</span></span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//  一秒钟换一次</span></span><br><span class="line">    number: <span class="number">1000</span>,</span><br><span class="line">    <span class="comment">//  自动播放</span></span><br><span class="line">    autoplay: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// TODO  简直开心啊，这个设置小数太酷了，这个功能实现主要是因为这里设置了小数</span></span><br><span class="line">    slidesPerView: <span class="number">1.4</span>,</span><br><span class="line">    <span class="comment">//  两个图片之间的间距</span></span><br><span class="line">    spaceBetween: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">//  激活的图片居中显示</span></span><br><span class="line">    centeredSlides: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>2、手动滑动后自动轮播失效</p>
<p>参考：<a href="https://blog.csdn.net/MPQ1314/article/details/86702181" target="_blank" rel="noopener">https://blog.csdn.net/MPQ1314/article/details/86702181</a></p>
<p>swiper轮播图设置自动轮播之后如果手动滑动之后，就不会再自动轮播了</p>
<p>解决方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swiper = <span class="keyword">new</span> Swiper(<span class="string">'#swiper1'</span>, &#123;</span><br><span class="line">      pagination: &#123;</span><br><span class="line">          el: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      loop:<span class="literal">true</span>,</span><br><span class="line">      autoplay: &#123;</span><br><span class="line">      		<span class="comment">// 加上这一行代码就可以了，具体原因请查看官方文档</span></span><br><span class="line">          disableOnInteraction: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用nginx反向代理实现本地多项目运行]]></title>
      <url>/ckilas0it005a0xqia1g6l3qn/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过本文，你可以了解到nginx反向代理的相关知识，以及如何在Mac OS上进行实践。其实因为懒，这个文章好久就想写了。</p>
<h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>在我开发GIFTO钱包和UG以及其他项目的时候，我们在启动项目的的时候默认会使用<code>zenbone start</code>来启动，因为我们配置的每个端口都是80，一个端口只能运行一个程序，就导致了多项目不能同时运行的问题。</p>
<a id="more"></a>
<h2 id="二、方案"><a href="#二、方案" class="headerlink" title="二、方案"></a>二、方案</h2><p>现在我们有下面的几个方案：</p>
<ol>
<li>修改多个项目的端口，每个项目会对应一个端口，然后使用<code>webpack-dev-server</code>进行启动，这样就可以同时启动多个项目了。</li>
<li>我们使用nginx做路径的反向代理，在 1 的基础上代理一些路径（一般是项目部署的路径）到本地测试服务器对应的端口上。<ul>
<li>我们访问 /gwallet/ 会访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></li>
<li>我们访问 /ugift2/ 会访问 <a href="http://localhost:3001" target="_blank" rel="noopener">http://localhost:3001</a></li>
</ul>
</li>
</ol>
<p>关于方案1：</p>
<p>如果我们的项目和域名没有关系，也和访问路径没有关系，那我们使用第一种方式那就足够了。</p>
<p>但是，我做的两个项目，都是需要配合域名来运行，原因有下面两个：</p>
<ol>
<li>项目运行需要登录功能，登录的回调域名是固定的，配置在三方平台的后台系统。</li>
<li>在客户端里面配置的URL是固定的（UG或者是GIFTO钱包），在客户端调试的时候需要域名访问(当然也可以使用我们的协议的方式打开App的webview来调试)。</li>
</ol>
<p>所以我最终选择了使用nginx做代理的方式实现。</p>
<h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>该实现方式可能会涉及到<a href="https://juejin.im/entry/57fb07b0816dfa0056c0ada8" target="_blank" rel="noopener">nginx反向代理</a>的相关知识，请看链接或者Google一下；</p>
<p>实现步骤分为下面的几部分（在Mac上实现，其他操作系统是类似的）：</p>
<ol>
<li>使用homebrew安装nginx；</li>
<li>修改nginx配置文件；</li>
<li>启动nginx服务器；</li>
<li>启动本地项目的webpack-dev-server；</li>
<li>测试运行。</li>
</ol>
<p>下面是详细的步骤：</p>
<h4 id="1-使用homebrew安装nginx"><a href="#1-使用homebrew安装nginx" class="headerlink" title="1. 使用homebrew安装nginx"></a>1. 使用homebrew安装nginx</h4><p>我们这里介绍使用homebrew安装nginx，所以我们先要判断本机上是否安装了homebrew，执行下面的命令来检查安装。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/c11a5a13-FrL3ne.png" alt="查看homebrew的版本"></p>
<p>看到上图的输出就说明已经安装了homebrew，不要误会，homebrew的执行命令就是brew。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/50d4dd73-q67umN.png" alt="没有安装homebrew"></p>
<p>如果提示<code>command not found</code>，我们就需要先安装homebrew。具体安装步骤请参考<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">这里</a>，当然安装的时候需要ruby环境，一般mac有会预置，没有也没有关系，可以自己安装一下，点击<a href="https://www.ruby-lang.org/en/downloads/" target="_blank" rel="noopener">这里查看详细</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>通过上面的操作我们已经安装好了homebrew，下面我们开始安装nginx。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/94fae42d-FjGSum.png" alt="开始安装nginx"></p>
<p>稍等命令执行完成。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/7d850c6b-cFfJ2o.png" alt="安装完成"></p>
<p>到这里我们的nginx就安装成功了。</p>
<h4 id="2-修改nginx配置文件"><a href="#2-修改nginx配置文件" class="headerlink" title="2. 修改nginx配置文件"></a>2. 修改nginx配置文件</h4><p>安装以后我们可以在这个目录下找到nginx的配置文件： /usr/local/etc/nginx。</p>
<p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/149b02bd-lyEjv4.png" alt="nginx配置文件目录"></p>
<p>此处我们只修改简单的配置，就不创建server配置文件了，我们直接修改nginx.conf主配置文件即可，现在我们通过vim或者是sublime打开该配置文件，在没有修改之前(默认)是长这样子的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # 是否打开发送文件</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        # 该服务器监听端口是8080</span><br><span class="line">        listen       8080;</span><br><span class="line">        # 使用localhost去访问</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们出去注释部分看一下server块，里面配置了启动的server的端口和域名。默认会有一个8080的服务器，其实对我们是没有用的，我们可以直接删除该server块，也可以不管，然后自己创建一个server块，其实也就是在server同级别添加一个server的配置，我的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 钱包和UG的配置</span><br><span class="line"># up开头的是测试环境可能会用到的</span><br><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    # server_name 是绑定的域名，就是说使用下面的域名访问的时候会使用该server块的配置，域名可以是多个，使用空格隔开即可。</span><br><span class="line">    server_name gifto.io m.upliveapps.com h5.upliveapp.com awsbj-game2u.xingyunzhi.cn localhost web.upliveapps.com m.giftomon.io up.live gifto.xingyunzhi.cn;</span><br><span class="line"></span><br><span class="line">    # 域名是上面的任意一个</span><br><span class="line">    # 注意为了让nginx生效，要访问的域名必须要绑定host到127.0.0.1</span><br><span class="line">    # 当访问 http://m.upliveapps.com/uplive-login/ nginx就会直接代理到本地的8008端口</span><br><span class="line">    # 所以访问 http://m.upliveapps.com/uplive-login/index.html 的时候，其实访问的是http://127.0.0.1:8008/index.html ，下面的所有资源都会被代理</span><br><span class="line">    # http://m.upliveapps.com/uplive-login/index.html  这个地址其实也就是我们上线以后的地址，这样就保证了地址统一，包括登录等都完全可以模拟了</span><br><span class="line"></span><br><span class="line">    location /uplive-login/ &#123;</span><br><span class="line">       proxy_pass      http://127.0.0.1:8008/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /iup-cash/ &#123;</span><br><span class="line">       proxy_pass      http://127.0.0.1:8010/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ugift2/ &#123;</span><br><span class="line">        proxy_pass      http://127.0.0.1:8001/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /gwallet/ &#123;</span><br><span class="line">        proxy_pass      http://127.0.0.1:8002/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ugift/ &#123;</span><br><span class="line">        proxy_pass      http://127.0.0.1:8003/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index           index.html;</span><br><span class="line">        proxy_pass      http://127.0.0.1:3000/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改完nginx的配置文件，我们还需要修改本地的hosts文件，加入你想使用m.upliveapps.com去访问nginx，就需要添加下面的行到 /etc/hosts。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   m.upliveapps.com</span><br></pre></td></tr></table></figure>
<p>其他的是同理的。</p>
<h4 id="3-启动nginx服务器"><a href="#3-启动nginx服务器" class="headerlink" title="3. 启动nginx服务器"></a>3. 启动nginx服务器</h4><p>在mac下启动nginx服务器其实是很简单的，因为我们启动的服务器是在80端口上，所以我们使用sudo去启动，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure>
<p>输入密码，回车就可以了</p>
<h4 id="4-启动本地项目的webpack-dev-server"><a href="#4-启动本地项目的webpack-dev-server" class="headerlink" title="4. 启动本地项目的webpack-dev-server"></a>4. 启动本地项目的webpack-dev-server</h4><p>我们先找到一个项目，此处就以gwallet这个项目为例子，首先我们需要修改gwallet项目的启动端口，这个应该都是会的，就是修改webpack.config.js的devServer部分的port为8002，然后我们在控制台启动项目。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server</span><br></pre></td></tr></table></figure>
<h4 id="5-测试运行"><a href="#5-测试运行" class="headerlink" title="5. 测试运行"></a>5. 测试运行</h4><p>我们看到项目启动成功以后，我们在浏览器访问 <a href="http://m.upliveapps.com/gwallet/index.html" target="_blank" rel="noopener">http://m.upliveapps.com/gwallet/index.html</a></p>
<p>如果没有看到你想看到的，请先看下下面的原因：</p>
<ol>
<li>hosts文件中 m.upliveapps.com 对应的ip是不是127.0.0.1</li>
<li>本地的webpack-dev-server是否已经启动了，可以使用<a href="http://127.0.0.1:8002/index.html" target="_blank" rel="noopener">http://127.0.0.1:8002/index.html</a> 访问测试</li>
<li>看看nginx是否启动成功了，在浏览器中访问，出现502 Bad Gateway | nginx 的字样，就说明启动成功了，否则没有。</li>
</ol>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li>反向代理 : <a href="https://juejin.im/entry/57fb07b0816dfa0056c0ada8" target="_blank" rel="noopener">https://juejin.im/entry/57fb07b0816dfa0056c0ada8</a></li>
<li>homebrew安装 : <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">https://brew.sh/index_zh-cn</a></li>
<li>Ruby安装 : <a href="https://www.ruby-lang.org/en/downloads/" target="_blank" rel="noopener">https://www.ruby-lang.org/en/downloads/</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用html2canvas实现截图下载]]></title>
      <url>/ckilas0ik004q0xqiy9akocdg/</url>
      <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>有时候我们会将我们的网页保存为截图，供离线观看和传播。相对于直接保存一个网页，图片有着不易修改，单独文件的好处，所以实现网页的截图还是还有必要的。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>经过在网上找一些插件，其中html2canvas插件用的人比较多，比较好的还有dom-to-image，这两个插件都可以实现网页的截图生成canvas功能。此处就以html2canvas为例记录一下笔记。</p>
<p>这两个插件都提供了npm包，所以可以直接使用npm下载。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html2canvas -S</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>主要的流程是：</p>
<blockquote>
<p>html2canvas实现dom转canvas  =&gt;  canvas转成base64  =&gt;  使用a标签的download属性实现下载功能。</p>
</blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先来一段html2canvas转canvas的代码（支持Promise），详细的文档可以看下：<a href="http://html2canvas.hertzen.com/" target="_blank" rel="noopener">http://html2canvas.hertzen.com/</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://html2canvas.hertzen.com/documentation   这个是详细的文档</span></span><br><span class="line"><span class="comment">// 下面的this.content是一个dom节点</span></span><br><span class="line">html2canvas(<span class="keyword">this</span>.content)</span><br><span class="line">	.then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//  生成的canvas可以转成base64</span></span><br><span class="line">	&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="comment">//	截图出错了我们要做的事情</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p>然后我们使用生成的canvas来实现下载功能</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = canvas.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line"><span class="comment">// 先构建一个a标签</span></span><br><span class="line"><span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// 设置要下载的内容</span></span><br><span class="line">link.href = url;</span><br><span class="line"><span class="comment">// 设置下载文件名称</span></span><br><span class="line">link.download = <span class="string">"screenshot.png"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line"><span class="comment">//  模拟点击了a链接</span></span><br><span class="line">link.click();</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(a);</span><br></pre></td></tr></table></figure>
<p>下面是完整的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(<span class="keyword">this</span>.content)</span><br><span class="line">	.then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//  生成的canvas可以转成base64</span></span><br><span class="line">        <span class="keyword">const</span> url = canvas.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line">        <span class="comment">// 先构建一个a标签</span></span><br><span class="line">        <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">        <span class="comment">// 设置要下载的内容</span></span><br><span class="line">        link.href = url;</span><br><span class="line">        <span class="comment">// 设置下载文件名称</span></span><br><span class="line">        link.download = <span class="string">"screenshot.png"</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">        <span class="comment">//  模拟点击了a链接</span></span><br><span class="line">        link.click();</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(a)</span><br><span class="line">	&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="comment">//	截图出错了我们要做的事情</span></span><br><span class="line">    	alert(<span class="string">'你的浏览器可能不支持canvas啊'</span>);</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p>因为IOS上所有的浏览器都不支持a标签的download属性，所以没有办法下载。目前测试没有问题的浏览器：</p>
<p>Mac系统：</p>
<ul>
<li>Firefox 60.0.1</li>
<li>Chrome 66.0</li>
<li>Safari 11.1</li>
</ul>
<p>Android系统：写文章时最新版Chrome，Firefox</p>
<p>Windows系统：写文章时最新版Chrome，Firefox</p>
<h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><p>可是我使用不当吧，有解决方案的同学可以联系我：</p>
<ol>
<li>就是发现截图的时候，如果有img或者是background有http://这种的就会导致图片丢失，我是直接把图片转成base64实现的，这样会导致文件有点大。（后面发现原因了，是因为图片的跨域的问题，需要设置CORS：<a href="https://www.cnblogs.com/padding1015/p/8947098.html" target="_blank" rel="noopener">https://www.cnblogs.com/padding1015/p/8947098.html</a>）</li>
<li>还有一个就是a标签download属性会在有些浏览器上不支持修改文件名称，在国内的QQ浏览器上还会下载失败，暂时也没有找到解决方案。（不支持修改文件名称也是跨域的问题，如果是同一个域就可以修改文件名）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[当窗口被浏览器拦截了怎么办？]]></title>
      <url>/ckilas0jc00660xqino9jecr5/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候我们可能需要在一些场景来显示一些弹窗，但是程序弹出的窗口会被浏览器直接拦截掉，以为是恶意弹窗。所以我们针对这样的场景应该怎么解决了？下面的方案可能只是针对一部分场景。</p>
<a id="more"></a>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>经过查询资料和询问朋友同事，发现是用户主动通过事件的方式弹出的窗口，浏览器不会给拦截掉。所以我们可以先在用户点击的时候打开一个窗口，然后在我们需要异步打开窗口的时候直接设置location就可以了。但是这种方式使用第三方sdk异步打开窗口的时候不生效的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先我们定义一个事件，需要用户主动的触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickRedirect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  someAction是一个Promise对象，用来做异步处理的</span></span><br><span class="line">    <span class="keyword">let</span> win = <span class="built_in">window</span>.open();</span><br><span class="line">    someAction()</span><br><span class="line">        .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        	<span class="comment">// 给打开的win设置url</span></span><br><span class="line">        	win.location.href = data.url;</span><br><span class="line">        	<span class="comment">// 激活当前的win</span></span><br><span class="line">        	win.focus();</span><br><span class="line">    	&#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        	<span class="comment">// 直接关闭</span></span><br><span class="line">        	win.close();</span><br><span class="line">    	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实用户异步打开的功能上面就基本都实现了。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>在用户异步请求的这段时间，会显示一个空白的窗口，不知道怎么去解决？</li>
<li>三方SDK打开的窗口没有办法去处理，需要开发者掌握对的时机，来触发打开？</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>window.open() 会返回一个window对象，如果返回的是null时，我们也可以主动的提示用户屏蔽了弹窗，让用户允许该网站的弹窗。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用DefinePlugin区分开发和线上打包优化]]></title>
      <url>/ckilas0ii004m0xqixg97lfwz/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于webpack开发的时候，我们有些代码只需要在开发时期来运行，例如打印详细的错误或警告信息。有些代码我们需要在线上运行的时候在执行，例如谷歌用户行为分析，如果在开发的时候就运行，会导致线上打点的结果不是很准确，失去了分析的意义。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>今日我通过查看部分库的源代码，里面用到了webpack的DefinePlugin，这个插件可以定义一个webpack打包时的全局变量，在我们的代码中可以通过判断这个全局变量的值就来执行对应的代码(该插件在webpack3和webpack2中可以正常使用，在webpack4中没有深入研究）。</p>
<h3 id="1、修改webpack配置"><a href="#1、修改webpack配置" class="headerlink" title="1、修改webpack配置"></a>1、修改webpack配置</h3><p>由于DefinePlugin是webpack内置的，所以不需要单独的下载，具体修改的配置如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">    ...,</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">        DEBUG: !<span class="regexp">/(product|stage)/</span>.test(process.env.NODE_ENV)</span><br><span class="line">    &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过在编译的时候传入NODE_ENV参数来控制代码的执行了。如果我们传入的NODE_ENV包含stage或者是product就设置为false，否则就是true。</p>
<h3 id="2、修改我们的业务代码"><a href="#2、修改我们的业务代码" class="headerlink" title="2、修改我们的业务代码"></a>2、修改我们的业务代码</h3><p>我们在业务代码中加入判断就可以选择代码的执行了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">    <span class="comment">// 这里是开发环境执行的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'可查看详细的错误信息了'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不是开发环境了，就直接执行线上的代码，我们可以在这里做用户行为分析的功能或者其他</span></span><br><span class="line">    <span class="comment">// 屏蔽console和alert</span></span><br><span class="line">    <span class="keyword">const</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">    <span class="built_in">window</span>.alert = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有一个好处就是线上打包的时候，uglifyjs通过代码分析，将 if (false) {}  这种的代码直接删除掉，根本就不会执行了。</p>
<h3 id="3、运行测试"><a href="#3、运行测试" class="headerlink" title="3、运行测试"></a>3、运行测试</h3><p>怎么才能看出我们上面的插件有没有用呢，我们可以执行下面的代码，来看看控制台的打印就好了。</p>
<p>首先在我们的业务代码中使用 <code>console.log()</code> 来打印一下这个值（先不要屏蔽console测试）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'是不否开发环境'</span>, DEBUG);</span><br></pre></td></tr></table></figure>
<p>然后调用 <code>webpack-dev-server</code> 来查看。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server  <span class="comment"># 没有传递任何的环境变量，控制台会输出true</span></span><br></pre></td></tr></table></figure>
<p>线上或者是测试环境运行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=stage webpack-dev-server  <span class="comment"># 现在NODE_ENV是stage，控制台会输出false</span></span><br><span class="line">NODE_ENV=product webpack-dev-server <span class="comment"># 现在NODE_ENV是product，控制台也会输出false</span></span><br></pre></td></tr></table></figure>
<p>既然输出都是正确的，那么我们通过判断的代码执行的逻辑也就是没有问题了</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>我们在做谷歌分析或者TalkingData的时候，我们只有线上环境才会执行分析，开发环境不会调用对应的事件，我们就可以定义一个环境变量来判断当前的环境。</li>
<li>我们在线上需要屏蔽不必要的alert，我们也可以这样做。</li>
<li>其他开发时和运行时代码级别的差异化都可以使用这种方法去实现。</li>
</ol>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>1、为什么我们要判断process.env.NODE_ENV呢？</p>
<p>因为我们的webpack是运行的node环境中的，process对象是node内置的一个运行时线程对象，process.env存储的使我们所有的环境变量，可以在执行node程序之前临时加上一个环境变量，linux和mac下使用比较简单，只需要在要执行的程序之前添加 <code>变量名=变量值</code> 就可以使用process.env读取到，举个例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=stage webpack-dev-server </span><br><span class="line"><span class="comment"># 执行webpack-dev-server的时候，取到的process.env.NODE_ENV就是stage， 其他的类似。</span></span><br></pre></td></tr></table></figure>
<p>2、为什么windows，执行<code>NODE_ENV=stage webpack-dev-server</code>会出现错误。请查看：<a href="https://blog.csdn.net/shimazhuge/article/details/70172108" target="_blank" rel="noopener">https://blog.csdn.net/shimazhuge/article/details/70172108</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web使用facebook和line等分享]]></title>
      <url>/ckilas0if004f0xqiukqayp0t/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我们在做开发的时候，需要将自己开发的网页分享到facebook、telegram、line等页面。然后需要在分享到的社交软件或者是朋友圈的时候，展示一些和链接相关的文案和图片（也就是富媒体展示）。在国内的一些社交网站上可以调用SDK或者url使用传递参数的方式来展示分享的内容。<br><a id="more"></a></p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="一、生成数据源"><a href="#一、生成数据源" class="headerlink" title="一、生成数据源"></a>一、生成数据源</h3><p>​    社交平台获取链接相关的信息时，一般都是通过抓取链接响应的meta标签来实现的（可以理解成我们使用ajax读取了我们传递的url的页面的信息，然后解析html结构读取meta标签上的配置信息）。因为不是在浏览器中运行，所以meta标签的数据在服务器端获取的时候就需要生成，不能抓取js来生成meta标签。meta标签分享的配置有一个协议（facebook制定的，很常用的三方社交网站支持这个协议），下面说一下这个协议。</p>
<blockquote>
<p>OG协议首页：<a href="http://ogp.me/" target="_blank" rel="noopener">http://ogp.me/</a></p>
</blockquote>
<p>我们最常用的字段如下（此处不多做介绍，可以使用上面的链接自行查询API）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">prefix</span>=<span class="string">"og: http://ogp.me/ns#"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Rock (1996)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示在分享上的title，一般是显示在第一行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"The Rock"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"article"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示在分享上的描述信息，一般是显示在第二行的小字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"该网页的描述"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"http://www.imdb.com/title/tt0117500/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"http://ia.media-imdb.com/images/rock.jpg"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面有两种方式可以定制分享的内容：</p>
<p>1、使用静态的meta标签；</p>
<p>​    简单来讲就是，将所有的数据写死在html文件head里面，这样的坏处就是不能根据内容来定制自己展示的样式，比较不常用，常见的方式是作为网站的宣传来分享使用，对于内容固定的场景。</p>
<p>2、使用后端语言生成meta标签；</p>
<p>​    也算是服务端渲染的一个场景吧，就是根据我们传递的数据让后端动态生成图片文本等资源，这样做的好处就是显示的内容由用户定义，比较灵活；缺点是需要服务端的辅助，前端是实现不了的。还有部分三方应用并不支持动态的资源定义，就像telegram的分享，只能注册过的链接才会富媒体展示。</p>
<h3 id="二、实现分享"><a href="#二、实现分享" class="headerlink" title="二、实现分享"></a>二、实现分享</h3><h4 id="1、facebook分享方式"><a href="#1、facebook分享方式" class="headerlink" title="1、facebook分享方式"></a>1、facebook分享方式</h4><p>facebook分享的时候需要在meta里面配置开发这id，详细：</p>
<blockquote>
<p>使用SDK的方式（推荐）</p>
</blockquote>
<p>A、首先我们要加载facebook的sdk，加载方式：<a href="https://developers.facebook.com/docs/javascript/quickstart" target="_blank" rel="noopener">https://developers.facebook.com/docs/javascript/quickstart</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.fbAsyncInit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  到这里就说明FB加载成功了，这里我们一般会以事件的形式通知调用者来调用</span></span><br><span class="line">    FB.init(&#123;</span><br><span class="line">      appId            : <span class="string">'your-app-id'</span>,</span><br><span class="line">      autoLogAppEvents : <span class="literal">true</span>,</span><br><span class="line">      xfbml            : <span class="literal">true</span>,</span><br><span class="line">      version          : <span class="string">'v3.0'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 这里我做一个基于jq的事件通知</span></span><br><span class="line">    $(<span class="string">'window'</span>).trigger(<span class="string">'fbSdkLoaded'</span>);</span><br><span class="line">    <span class="built_in">window</span>.fb = FB;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">d, s, id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> js, fjs = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (d.getElementById(id)) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    js = d.createElement(s); js.id = id;</span><br><span class="line">    js.src = <span class="string">"https://connect.facebook.net/en_US/sdk.js"</span>;</span><br><span class="line">    fjs.parentNode.insertBefore(js, fjs);</span><br><span class="line">&#125;(<span class="built_in">document</span>, <span class="string">'script'</span>, <span class="string">'facebook-jssdk'</span>));</span><br></pre></td></tr></table></figure>
<p>B、我们配置一下我们要分享的页面的meta标签：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:site_name"</span> <span class="attr">content</span>=<span class="string">"这里是title"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"这里也是title"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"点击以后要跳转的地址"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"这里是分享的描述文件"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"这里是图片的地址"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"fb:app_id"</span> <span class="attr">content</span>=<span class="string">"这里是fb的开发者id"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>C、开始分享我们的链接：<a href="https://developers.facebook.com/docs/sharing/reference/share-dialog" target="_blank" rel="noopener">https://developers.facebook.com/docs/sharing/reference/share-dialog</a>，下面就封装一个分享的方法：  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">share</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 这个方法的参数可以看上面的链接，不一定向下面的这样写。</span></span><br><span class="line">      FB.ui(&#123;</span><br><span class="line">          method: <span class="string">'share_open_graph'</span>,</span><br><span class="line">          action_type: <span class="string">'og.likes'</span>,</span><br><span class="line">          action_properties: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            object:<span class="string">'https://developers.facebook.com/docs/'</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.fb) &#123;</span><br><span class="line">      handle();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="comment">//  如果没有加载成功，需要监听事件</span></span><br><span class="line">      $(<span class="built_in">window</span>).on(<span class="string">'fbSdkLoaded'</span>, handle);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用链接的方式（也需要配置meta标签，同上）</p>
</blockquote>
<p>A、直接将location.href导向分享地址即可（注意里面的href需要使用<em>encodeURIComponent</em>方法转一下），在这里还是推荐使用SDK的方式分享。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://www.facebook.com/dialog/share?</span><br><span class="line">  app_id=145634995501895</span><br><span class="line">  &amp;display=popup</span><br><span class="line">  &amp;href=你要分享给别人的地址</span><br><span class="line">  &amp;redirect_uri=分享成功后需要跳转的地址</span><br></pre></td></tr></table></figure>
<h4 id="2、line分享方式"><a href="#2、line分享方式" class="headerlink" title="2、line分享方式"></a>2、line分享方式</h4><blockquote>
<p>使用链接的方式</p>
</blockquote>
<p>A、我们先在要分享的页面加上meta的信息，这个不需要开发者id，例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"显示的title信息"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"描述信息"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"图片的地址"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"点击以后要跳转的地址"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"article"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>B、这个比较简单，在分享的链接中配置好meta元数据后，直接使用链接就能实现分享到timeline或者好友群组等。下面是分享的链接：</p>
<p><a href="https://social-plugins.line.me/lineit/share?url=${encodeURIComponent(location.href)}" target="_blank" rel="noopener">https://social-plugins.line.me/lineit/share?url=${encodeURIComponent(location.href)}</a></p>
<h4 id="3、telegram分享方式"><a href="#3、telegram分享方式" class="headerlink" title="3、telegram分享方式"></a>3、telegram分享方式</h4><blockquote>
<p>使用链接和机器人注册的方式</p>
</blockquote>
<p>​    也是通过链接分享的，但是如果需要该链接富媒体展示，需要在机器人做注册（机器人注册时基于链接的，如果链接修改了，就不能显示富媒体了，即使参数和hash修改都会导致显示富媒体失败）。</p>
<p>A、去机器人注册一下你要分享的链接（机器人地址：<a href="https://t.me/webpagebot" target="_blank" rel="noopener">https://t.me/webpagebot</a>）;</p>
<p>B、分享链接：<a href="https://t.me/share/url?url=你要分享的URL" target="_blank" rel="noopener">https://t.me/share/url?url=你要分享的URL</a>;</p>
<p>C、你去调用一下分享，发现在聊天的是窗口已经可以展示图片和文本了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://ogp.me/" target="_blank" rel="noopener">http://ogp.me/</a></li>
<li><a href="https://telegram.wiki/general/website-sharing" target="_blank" rel="noopener">https://telegram.wiki/general/website-sharing</a></li>
<li><a href="https://telegram.wiki/general/link-previews" target="_blank" rel="noopener">https://telegram.wiki/general/link-previews</a></li>
<li><a href="https://social-plugins.line.me/zh_TW/how_to_install" target="_blank" rel="noopener">https://social-plugins.line.me/zh_TW/how_to_install</a></li>
<li><a href="https://developers.facebook.com/docs/sharing/reference/share-dialog" target="_blank" rel="noopener">https://developers.facebook.com/docs/sharing/reference/share-dialog</a></li>
<li><a href="https://developers.line.me/en/faq/" target="_blank" rel="noopener">https://developers.line.me/en/faq/</a></li>
<li><a href="https://stackoverflow.com/questions/35268940/how-to-force-telegram-to-update-link-preview" target="_blank" rel="noopener">https://stackoverflow.com/questions/35268940/how-to-force-telegram-to-update-link-preview</a></li>
<li><a href="http://www.4u4v.net/meta-the-property-of-the-open-graph-protocol-open-content-protocol.html" target="_blank" rel="noopener">http://www.4u4v.net/meta-the-property-of-the-open-graph-protocol-open-content-protocol.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[H5适配iPhone X的底部圆角之flex布局改装]]></title>
      <url>/ckilas0gf000h0xqi0mjbjbct/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>在开发一款webapp的时候发现，fixed定位的顶部导航栏，当页面出现滚动条的时候就出现了iPhone X下面的黑线遮挡内容的情况，很影响操作。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>既然知道是页面出现了滚动条出现导致的，所以就想办法干掉全局的滚动条，使用局部滚动，然而在div使用局部滚动条居然丑不堪言，后面又选择了better-scroll（选择的原因是其内置了上拉加载的特性、业务也需要该功能，之前用的是dropload）。</p>
<a id="more"></a>
<h2 id="旧版实现"><a href="#旧版实现" class="headerlink" title="旧版实现"></a>旧版实现</h2><p>看图说话</p>
<h2 id="新版实现"><a href="#新版实现" class="headerlink" title="新版实现"></a>新版实现</h2><p>全部使用了flex布局，是典型的上中下结构，这样就让全局滚动条彻底不要了。</p>
<h2 id="Better-Scroll使用遇到了困难"><a href="#Better-Scroll使用遇到了困难" class="headerlink" title="Better-Scroll使用遇到了困难"></a>Better-Scroll使用遇到了困难</h2><p>此处需要重新写一篇文章说一下，简直不要太多了</p>
<ol>
<li>使用上拉加载（显示正在加载和加载完成的文案）。</li>
<li>使用scrollTo滚动以后，手动滚动就出现了问题，卡了一下居然回到顶部了，据说scroll以后需要调用下refresh方法（<a href="https://github.com/ustbhuangyi/better-scroll/issues/419）。" target="_blank" rel="noopener">https://github.com/ustbhuangyi/better-scroll/issues/419）。</a></li>
<li>scrollTo的y轴的位置不是window的scrollY（简直花了好长时间来调整的）。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Window下设置Git-Bash为Webstorm的默认Terminal]]></title>
      <url>/ckilas0hc001v0xqiumjbnxg0/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://www.jianshu.com/p/6c29d366ca9c" target="_blank" rel="noopener">https://www.jianshu.com/p/6c29d366ca9c</a></p>
<p>当然我们使用wind10的朋友呢，可以直接使用wsl实现linux的操作，下面是针对不支持wsl的操作系统的修改。</p>
<h4 id="Bash说明："><a href="#Bash说明：" class="headerlink" title="Bash说明："></a>Bash说明：</h4><ol>
<li>熟悉Linux的人，相对于cmd，可能更加喜欢bash。</li>
<li>Bash的命令都比较简单，并且功能强大。</li>
<li>git-bash支持了bash基础的一些命令。</li>
</ol>
<a id="more"></a>
<p>Intellij IDEA 系列都支持该配置。</p>
<h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><ol>
<li>打开 File -&gt; Setting -&gt; Plugins 搜索Terminal，勾选Terminal插件，点击确认。</li>
<li>会提示重启Webstorm，点击重启，重启后在状态栏上面就能可以看到Terminal标签了。</li>
<li>进入 File -&gt; Setting -&gt; Tools -&gt; Terminal，在 Shell path 那一栏中，输入你安装Git的位置，格式如下。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Git\bin\sh.exe&quot; -login -i</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>点击保存设置，关闭Terminal重新打开就是git-bash了，第一次打开可能比较慢，耐心等候即可。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编辑器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webstorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React-Router4升级之路]]></title>
      <url>/ckilas0gy00130xqi0up8nzkq/</url>
      <content type="html"><![CDATA[<p>最近将React升级到了16.2，也将项目的React-Router升级了v4，我主要说一下我的升级之路。</p>
<p>参考： <a href="https://reacttraining.com/react-router/web/example/basic" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/example/basic</a><br><a id="more"></a></p>
<h2 id="React-16-新特性"><a href="#React-16-新特性" class="headerlink" title="React 16 新特性"></a>React 16 新特性</h2><p>1、render支持了多种的返回类型</p>
<p>2、更好的错误处理，新增componentDidCatch钩子 (<a href="http://blog.csdn.net/liwusen/article/details/78521006" target="_blank" rel="noopener">http://blog.csdn.net/liwusen/article/details/78521006</a>）</p>
<p>3、支持自定义DOM属性，属性会透传</p>
<p>4、体积更小（比15减少了32%），删除了内置的类型检查React.PropTypes</p>
<p>5、Portals（处理弹窗更加优化）</p>
<p>6、性能优化（<a href="https://www.itcodemonkey.com/article/1306.html" target="_blank" rel="noopener">https://www.itcodemonkey.com/article/1306.html</a>）</p>
<p><strong>参考：</strong><br><a href="http://www.jb51.net/article/127955.htm" target="_blank" rel="noopener">http://www.jb51.net/article/127955.htm</a><br><a href="http://blog.csdn.net/lx376693576/article/details/78192768" target="_blank" rel="noopener">http://blog.csdn.net/lx376693576/article/details/78192768</a></p>
<h2 id="React-Router-v4-新特性"><a href="#React-Router-v4-新特性" class="headerlink" title="React Router v4 新特性"></a>React Router v4 新特性</h2><p>1、全组件化</p>
<p>2、修复多次渲染问题</p>
<p>3、新的异步加载方式</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下面就以React-Router和最新的React16为例子安装，由于React的API变化不是很大，此处就不多做介绍了。</p>
<ol>
<li>先删除项目中依赖的旧版React和React-Router(如果不删除，升级需要指定版本号)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall react react-dom react-router --save</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装最新版本(此处的最新版本就是16和4，注意router的包名称是react-router-dom, history是用来访问历史的)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom react-router-dom <span class="built_in">history</span> --save</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>查看项目目录下面的package.json</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "history": "^4.7.2",</span><br><span class="line">    "react": "^16.2.0",</span><br><span class="line">    "react-dom": "^16.2.0",</span><br><span class="line">    "react-router-dom": "^4.2.2"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="一、路由的配置方式"><a href="#一、路由的配置方式" class="headerlink" title="一、路由的配置方式"></a>一、路由的配置方式</h3><p>先上代码了</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HashRouter, Route, Switch&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;HashRouter&gt;</span><br><span class="line">                &lt;Switch&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">"/"</span> exact component=&#123;BindEmail&#125;/&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">"/bindemail"</span> component=&#123;BindEmail&#125;/&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">"/bindemailresult/:type"</span> component=&#123;BindEmailResult&#125;/&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">"/updatepassword"</span> component=&#123;UpdatePassword&#125;/&gt;</span><br><span class="line">                    &lt;Route path=<span class="string">"/updatemail"</span> component=&#123;UpdateMail&#125;/&gt;</span><br><span class="line">                    &lt;Route component=&#123;BindEmail&#125;/&gt;</span><br><span class="line">                &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>HashRouter&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看上面的代码首先要注意几点</p>
<ol>
<li>Router替换成了HashRouter，并且少了一个history的属性，当然你也可以使用BrowserRouter不过需要后台支持。</li>
<li>Route中删除了getComponent属性，那我们异步加载怎么办呢，下面会说一下。</li>
<li>多了一个Switch组件，以前设置404路由的时候只要在最后加上path=”*”就好了，但是现在只需要在最后加一个路由并且由Switch组件包裹即可。</li>
<li>第一行的Route上有一个exact属性，这个属性说明精确匹配，否则所有/开头的组件都会展示/配置的组件(比较绕，可以到时候讲一下)。</li>
<li>HashRouter组件内部只能包含一个组件，如果有多个会直接报错。</li>
<li>当然了，我们导入的时候只需要导入react-router-dom。</li>
</ol>
<p><strong><em>4很重要，不要忽略</em></strong></p>
<h3 id="二、异步加载的方式"><a href="#二、异步加载的方式" class="headerlink" title="二、异步加载的方式"></a>二、异步加载的方式</h3><p>我们可以使用高阶组件和webpack的import方法进行异步加载js。</p>
<ol>
<li>首先我们得有一个用来加载异步组件的高阶组件，我们暂且称之为”asyncComponent”，实现如下：</li>
</ol>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncComponent = <span class="function"><span class="params">loadComponent</span> =&gt;</span> (</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                Component: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentWillMount() &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hasLoadedComponent()) &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            loadComponent()</span><br><span class="line">                <span class="comment">//  取到module的default作为组件，因为我们导出组件的时候使用的是 export default</span></span><br><span class="line">                .then(<span class="function"><span class="params">module</span> =&gt;</span> <span class="built_in">module</span>.default)</span><br><span class="line">                .then(<span class="function">(<span class="params">Component</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;Component&#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.error(<span class="string">`Cannot load component in &lt;AsyncComponent /&gt;`</span>);</span><br><span class="line">                    <span class="keyword">throw</span> err</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        hasLoadedComponent() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.state.Component !== <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;Component&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> (Component) ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span> : <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>我们将需要拆分的js文件，进行下面的处理，import方法会返回一个promise，注意/<em> webpackChunkName: “test” </em>/ 这种注释不能删除，它描述了拆分后的文件名称。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;asyncComponent <span class="keyword">as</span> <span class="keyword">async</span>&#125; <span class="keyword">from</span> <span class="string">'./views/async'</span></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Test = <span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "test" */</span> <span class="string">'./test'</span>));</span><br><span class="line"><span class="comment">// 绑定邮箱</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BindEmail = <span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "bindemail" */</span> <span class="string">'./views/bindemail'</span>));</span><br><span class="line"><span class="comment">// 修改密码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UpdatePassword = <span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "updatepassword" */</span> <span class="string">'./views/bindemail/updatepassword'</span>));</span><br><span class="line"><span class="comment">// 修改邮箱</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UpdateMail = <span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "updatemail" */</span> <span class="string">'./views/bindemail/updatemail'</span>));</span><br><span class="line"><span class="comment">// 邮箱绑定结果</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BindEmailResult = <span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "bindemailresult" */</span> <span class="string">'./views/bindemail/result'</span>));</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>然后我们在路由中直接配置component属性就好了，相比之前会简单一点</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/bindemail"</span> component=&#123;BindEmail&#125;/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="三、可编程路由-路由切换"><a href="#三、可编程路由-路由切换" class="headerlink" title="三、可编程路由(路由切换)"></a>三、可编程路由(路由切换)</h3><ol>
<li>我们一般会在js中获取路由的参数，我们以前的方式是这样的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.route.params.xxx;</span><br></pre></td></tr></table></figure>
<p>在v4中，会在props上挂载一个match对象，所以获取参数，使用下面的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.props.match.params.xxx</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://reacttraining.com/react-router/web/api/match" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/api/match</a></p>
<ol start="2">
<li>在代码中切换路由，以前是直接调用hashHistory的方法切换，如</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; hashHistory &#125; from &apos;react-router&apos;;</span><br><span class="line">hashHistory.push(&apos;/home&apos;);</span><br></pre></td></tr></table></figure>
<p>在v4中将操作历史的工具单独抽离了，也就是history包，API和hashHistory基本一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createHashHistory &#125; from &apos;history&apos;;</span><br><span class="line">const history = createHashHistory();</span><br><span class="line">history.push(&apos;/home&apos;);</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>低端的浏览器上面可能不支持Map和Set类，会报错：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map is not undefined</span><br></pre></td></tr></table></figure>
<p>解决方案：<br>安装core-js，在引入Set，Map相关的语法糖（或许你也可以babel-polyfill，React官方使用的是core-js），如下就可以了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">'core-js/es6/map'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Set</span> <span class="keyword">from</span> <span class="string">'core-js/es6/set'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  绑定在window上，就可以全局访问了</span></span><br><span class="line"><span class="built_in">window</span>.Map = <span class="built_in">Map</span>;</span><br><span class="line"><span class="built_in">window</span>.Set = <span class="built_in">Set</span>;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://reactjs.org/docs/javascript-environment-requirements.html" target="_blank" rel="noopener">https://reactjs.org/docs/javascript-environment-requirements.html</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用webpack插件抽取项目中的less文件]]></title>
      <url>/ckilas0ix005h0xqiu9fxt851/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目中我一般喜欢一些预处理css处理器来开发代码，首先是因为灵活，其次就是能很好的处理样式的命名空间，防止样式冲突。</p>
<a id="more"></a>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在React相关的项目开发中，我们的开发方式是每一个组件中会有一个单独的less文件，如果需要让分散在项目中的less文件全部抽取到一个统一的css文件中，就需要用到<code>extract-text-webpack-plugin</code>插件实现样式的抽取。</p>
<p>该插件是webpack 4.0.0版本之前使用的，4.0.0的后续版本会有新的工具使用；</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>之前会抽取到两个css文件，由于历史原因，只能加载一个css文件，这就导致了有一部分的样式缺失，没有办法加载。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将css和less文件使用同一组loader去加载，这样就能输出到同一个css文件了，详细实现的代码如下；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(less|css)$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use:[ <span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>],</span><br><span class="line">          fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.css'</span>,</span><br><span class="line">      disable: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">//  这个参数是必须的，否则只能抽取到入口文件中的css文件</span></span><br><span class="line">      allChunks: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，没个组件或者模块需要用自己独立的命名空间，否则合并成一个css后会导致样式覆盖的问题；</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker给运行中的容器添加映射端口]]></title>
      <url>/ckilas0gd000f0xqip8zlwd9p/</url>
      <content type="html"><![CDATA[<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><h3 id="1、获得容器IP"><a href="#1、获得容器IP" class="headerlink" title="1、获得容器IP"></a>1、获得容器IP</h3><p>将container_name 换成实际环境中的容器名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect `container_name` | grep IPAddress</span><br></pre></td></tr></table></figure></p>
<h3 id="2、-iptable转发端口"><a href="#2、-iptable转发端口" class="headerlink" title="2、 iptable转发端口"></a>2、 iptable转发端口</h3><p>将容器的8000端口映射到docker主机的8001端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A  DOCKER -p tcp --dport 8001 -j DNAT --to-destination 172.17.0.19:8000</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><h3 id="1-提交一个运行中的容器为镜像"><a href="#1-提交一个运行中的容器为镜像" class="headerlink" title="1.提交一个运行中的容器为镜像"></a>1.提交一个运行中的容器为镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit containerid foo/live</span><br></pre></td></tr></table></figure>
<h3 id="2-运行镜像并添加端口"><a href="#2-运行镜像并添加端口" class="headerlink" title="2.运行镜像并添加端口"></a>2.运行镜像并添加端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:80  foo/live /bin/bash</span><br></pre></td></tr></table></figure>
<p>转载: <a href="http://blog.csdn.net/github_29237033/article/details/46632647" target="_blank" rel="noopener">http://blog.csdn.net/github_29237033/article/details/46632647</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iScroll在安卓和IOS点击失效和点击两次解决方案]]></title>
      <url>/ckilas0hn002l0xqix2red29z/</url>
      <content type="html"><![CDATA[<p>转载： <a href="https://www.cnblogs.com/chaser-li/p/7418678.html" target="_blank" rel="noopener">https://www.cnblogs.com/chaser-li/p/7418678.html</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> myScroll = <span class="keyword">new</span> IScroll(<span class="string">"#ID"</span>, &#123;</span><br><span class="line">    scrollbars: <span class="literal">true</span>,<span class="comment">//有滚动条</span></span><br><span class="line">    mouseWheel: <span class="literal">true</span>,<span class="comment">//允许滑轮滚动</span></span><br><span class="line">    fadeScrollbars: <span class="literal">true</span><span class="comment">//滚动时显示滚动条，默认影藏，并且是淡出淡入效果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>在 iOS上点击有效，在Android上点击无效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myScroll = <span class="keyword">new</span> IScroll(<span class="string">"#ID"</span>, &#123;</span><br><span class="line">　　 click:<span class="literal">true</span>, <span class="comment">//调用判断函数</span></span><br><span class="line">    scrollbars: <span class="literal">true</span>,<span class="comment">//有滚动条</span></span><br><span class="line">    mouseWheel: <span class="literal">true</span>,<span class="comment">//允许滑轮滚动</span></span><br><span class="line">    fadeScrollbars: <span class="literal">true</span><span class="comment">//滚动时显示滚动条，默认影藏，并且是淡出淡入效果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>此时在android上点击有效，不过在IOS上就要点击两次才有效！</p>
<p>解决办法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">myScroll = <span class="keyword">new</span> IScroll(<span class="string">"#ID"</span>, &#123;</span><br><span class="line">	click:iScrollClick(), <span class="comment">//调用判断函数</span></span><br><span class="line">    scrollbars: <span class="literal">true</span>,<span class="comment">//有滚动条</span></span><br><span class="line">    mouseWheel: <span class="literal">true</span>,<span class="comment">//允许滑轮滚动</span></span><br><span class="line">    fadeScrollbars: <span class="literal">true</span><span class="comment">//滚动时显示滚动条，默认影藏，并且是淡出淡入效果</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iScrollClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/iPhone|iPad|iPod|Macintosh/i</span>.test(navigator.userAgent)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Chrome/i</span>.test(navigator.userAgent)) <span class="keyword">return</span> (<span class="regexp">/Android/i</span>.test(navigator.userAgent));</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Silk/i</span>.test(navigator.userAgent)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Android/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">       <span class="keyword">var</span> s=navigator.userAgent.substr(navigator.userAgent.indexOf(<span class="string">'Android'</span>)+<span class="number">8</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">parseFloat</span>(s[<span class="number">0</span>]+s[<span class="number">3</span>]) &lt; <span class="number">44</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[eslint报错"unexpected token = "]]></title>
      <url>/ckilas0hg00230xqidga0teea/</url>
      <content type="html"><![CDATA[<p>配置eslint的时候，出现了下面的错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unexpected token =</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>源码：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Asset</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    articleImageUrl: React.PropTypes.string.isRequired,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"article__asset"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>解决方案</p>
<p>因为默认的解析器不支持es6的语法，所以会报错，我们在这里安装上babel的解析器就可以了；</p>
<blockquote>
<p>Use the babel-eslint parser in your ESLint configuration.<br>npm install babel-eslint –save</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"react"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://stackoverflow.com/questions/37361104/eslinterror-in-plugin-gulp-eslint-parsing-error-unexpected-token" target="_blank" rel="noopener">https://stackoverflow.com/questions/37361104/eslinterror-in-plugin-gulp-eslint-parsing-error-unexpected-token</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[js检测手机浏览器切换到后台的方案]]></title>
      <url>/ckilas0ht00300xqiuki37tb8/</url>
      <content type="html"><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><p>使用H5打开一个本地的app（本地app有相关协议可以被H5拉起），如果本地没有安装这个app，就跳转到该app的下载页面。</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>H5打开app时，会将浏览器切换到后台，所有我们可以延迟检测浏览器的是否隐藏就可以来决定是跳转下载页面（没有安装app），还是已经打开app了。</p>
<a id="more"></a>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>安卓上H5在非浏览器环境（webview）中直接打开app（使用自定义的protocol，例如<code>myapp://</code>）会被所寄生的app拦截，所以判断UA，如果不是浏览器，先提示在浏览器中打开。</p>
<h2 id="js实现方法"><a href="#js实现方法" class="headerlink" title="js实现方法"></a>js实现方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isAndroid = <span class="regexp">/[aA]ndroid/i</span>.test(navigator.userAgent);</span><br><span class="line"><span class="keyword">const</span> isIOS = <span class="regexp">/(iPhone|iPad|iPod|iOS)/i</span>.test(navigator.userAgent);</span><br><span class="line"><span class="keyword">const</span> NativeObj = &#123;</span><br><span class="line">    openUrlCallApp()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> appDownloadPage = <span class="string">'https://apk.google.com/xxx'</span>;</span><br><span class="line"><span class="comment">//  获取页面的可见性</span></span><br><span class="line"><span class="keyword">const</span> getDocVisible = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">document</span>.hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.webkitHidden !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">document</span>.webkitHidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.visibilityState === <span class="string">'visible'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openApp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 尝试启动app,NativeObj是底层对跳转的封装</span></span><br><span class="line">    NativeObj.openUrlCallApp();</span><br><span class="line">    <span class="comment">// 如果是安卓，同时启用一个延时，判断页面是否切换走了</span></span><br><span class="line">    <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">        <span class="comment">//  在安卓手机中打开，页面转向下载页面</span></span><br><span class="line">        <span class="comment">//  延迟1s判断页面的状态，如果没有被别的页面遮盖就说明没有跳转，就跳转到下载页面</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getDocVisible()) &#123;</span><br><span class="line">                location.href = appDownloadPage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><p>如果在手机上安装了两个注册相同protocol的app，会出现打开方式，也会导致跳转到下载页面，这种情况暂时没有解决。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/visibilityState" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/visibilityState</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安卓chrome上iscroll不能滚动的问题]]></title>
      <url>/ckilas0j7005v0xqiyxnzldbt/</url>
      <content type="html"><![CDATA[<p>安卓上chrome浏览器iscroll滚动有问题，电脑端没有问题，经过查资料，有了下面的解决办法：</p>
<p>在html文件的head的最上端加上一段脚本即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.PointerEvent = <span class="keyword">void</span> <span class="number">0</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="https://segmentfault.com/q/1010000008489619" target="_blank" rel="noopener">https://segmentfault.com/q/1010000008489619</a><br><a id="more"></a><br>完整html文件如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span> <span class="attr">xml:lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>UpLive<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.PointerEvent = <span class="keyword">void</span> <span class="number">0</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片预加载方案]]></title>
      <url>/ckilas0j4005o0xqid2civ3so/</url>
      <content type="html"><![CDATA[<p>一个关于图片预加载的项目，始终还是遇到了图片预加载（废话）。</p>
<a id="more"></a>
<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>在开发活动项目的时候，有一个转盘抽奖的功能，要求抽到每个奖项的时候显示不同的图片，我们内心是这样想的；<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/yujiazai1-akqGht.png" width="300px"></p>
<p>然而现实却是这样，图片去哪里了啊，原来是图片比较大（之前没有做优化）加载比较慢，所以我们看到了文本，但是没有看到背景<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/yujiazai2-0ZK2wf.png" width="300px"></p>
<p>因为红包组件是动态替换背景图片的，所以图片没有缓存的时候，都需要立即发请求，所以就导致了加载慢的问题；<br>示例代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>'<span class="attr">redpack-content</span> ' + (<span class="attr">show</span> ? '<span class="attr">animated</span> <span class="attr">bounceIn</span>' <span class="attr">:</span> '<span class="attr">redpack-hidden</span>')&#125;</span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundImage:</span> '<span class="attr">url</span>("' + <span class="attr">imgArr</span>[<span class="attr">level</span>] + '")'&#125;&#125;&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"redpack-text center"</span>&gt;</span></span><br><span class="line">        &#123;textArr[level]&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"redpack-x"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">onClick</span>=<span class="string">&#123;this.closeClick&#125;</span> <span class="attr">src</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">images</span>/<span class="attr">homev2</span>/<span class="attr">redpackage</span>/<span class="attr">x.png</span>')&#125;/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><span style="color:blue">每次按照奖项的index来获取数组中存储的图片</span></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>图片资源下载一次后，第二次就会从缓存取。<br>下载图片和网络有很大的关系，尤其是国外的服务器，在缓存取的时候和网络没有关系，是很快的。<br>但是有一个条件：<span style="color:red">服务器必须设置浏览器可缓存，否则预加载没有任何意义，因为每次都会去服务器拉取最新的资源。</span></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在页面加载完成时，或者setTimeout加载所需的图片，示例代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  预加载图片</span></span><br><span class="line"><span class="comment">//  这里每次加载5个图片，每一批间隔是1s</span></span><br><span class="line"><span class="keyword">const</span> preLoadConfig = &#123;<span class="attr">size</span>: <span class="number">5</span>, <span class="attr">interval</span>: <span class="number">1000</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> preLoadImage = <span class="function">(<span class="params">imageArr = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  如果没有图片直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!imageArr.length) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        imageArr.splice(<span class="number">0</span>, preLoadConfig.size).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">            img.src = item</span><br><span class="line">        &#125;);</span><br><span class="line">        preLoadImage(imageArr)</span><br><span class="line">    &#125;, preLoadConfig.interval)</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//  开始加载图片，这个应该放在页面的入口处</span></span><br><span class="line">preLoadImage([</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/thank.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/2p.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/1p.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/10g.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/15g.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/3g.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/80g.png'</span>),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'../../../images/homev2/redpackage/5g.png'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p>
<p>延迟一秒获取剩余的图片，防止和其他的请求一起，导致请求阻塞（浏览器有同源请求上限）。<br>new Image()创建对象，指定src的时候会下载指定的图片，等下次请求的时候就是 from disk 或者 from memory 了，速度显然快了很多</p>
<h2 id="优化结果"><a href="#优化结果" class="headerlink" title="优化结果"></a>优化结果</h2><p>不废话，看效果（页面首次加载时）<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/yujiazai3-SmCnrz.png" alt="yujiazai3"><br>抽中红包后一看，这货花了6ms，简直无法感知。<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/yujiazai4-MewggD.png" alt="yujiazai4"></p>
<p>到这里，你也许看完了，文中有问题的请帮我指正，谢谢阅读。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker基础使用入门]]></title>
      <url>/ckilas0he00210xqifrz9eunv/</url>
      <content type="html"><![CDATA[<p>随着微服务化，docker的使用也越来越常见了，我下面总结了一下docker常见的命令使用；</p>
<p>一、镜像相关</p>
<p><code>docker images</code>，显示下载的所有镜像；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">jenkinsci/blueocean   latest              810b3bb0601c        8 days ago          563MB</span><br></pre></td></tr></table></figure>
<p><code>docker pull imageName</code>，在服务器上下载镜像；</p>
<p><code>docker rmi imageName</code>，删除本地的镜像，例如：docker rmi jenkinsci/blueocean；</p>
<a id="more"></a>
<p>二、容器相关</p>
<p>注意：下面的Container Name也可以使用Container ID代替</p>
<p><code>docker create [options] imageName [COMMAND]</code>，创建一个容器，下面是常见的配置；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">~ ➤ docker create --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:	docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">Create a new container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --add-host list                  添加hosts对应关系，格式就像系统的host配置文件 (host:ip)</span><br><span class="line">      --dns list                       设置dns服务器，可以是多个值</span><br><span class="line">  -e, --env list                       设置环境变量，可以是多个值</span><br><span class="line">      --env-file list                  环境变量的env文件</span><br><span class="line">      --expose list                    对外暴露的端口，可以是多个</span><br><span class="line">  -h, --hostname string                Container host name</span><br><span class="line">      --ip string                      IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --link list                      关联到其他的容器，互通访问</span><br><span class="line">      --link-local-ip list             Container IPv4/IPv6 link-local addresses</span><br><span class="line">      --mount mount                    Attach a filesystem mount to the container</span><br><span class="line">      --name string                    Assign a name to the container</span><br><span class="line">  -p, --publish list                   端口映射，格式=&gt;   hostPort:containerPort</span><br><span class="line">  -P, --publish-all                    将容器expose的端口随机的映射到主机上</span><br><span class="line">  -t, --tty                            Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -v, --volume list                    将容器的地址映射到本地的地址上，为了资源共享</span><br><span class="line">  -w, --workdir string                 Working directory inside the container</span><br></pre></td></tr></table></figure>
<p><code>docker start containerName</code>， 启动已经创建好的容器；<br><code>docker stop containerName</code>，停止运行中的容器；<br><code>docker restart containerName</code>，重新启动运行中的容器；<br><code>docker run [OPTIONS] IMAGE [COMMAND]</code>，是docker create和docker start的合并，创建并启动容器；</p>
<p><code>docker exec -it containerName COMMAND</code>，进入容器并执行COMMAND命令；<br><code>docker logs -f containerName</code>，递增式打印日志；</p>
<p><code>docker ps -a</code>，显示所有的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ ➤ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">9566755c6d8e        jenkinsci/blueocean   &quot;/sbin/tini -- /usr/…&quot;   8 days ago          Exited (143) 3 days ago                       jenkins</span><br></pre></td></tr></table></figure></p>
<p>临时启动一个docker，停止后删除容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ ➤ docker run -d xxx</span><br></pre></td></tr></table></figure>
<p>更新待续；</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用HTML5的FileReader对象进行图片的读取和展示]]></title>
      <url>/ckilas0jo006y0xqi2ixwdb10/</url>
      <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>使用file选择一个图片，上传到服务器，如果成功了。就替换图片。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1、首先由一个html片段，包括一个预览图片的容器和一个选择图片的文件选择器。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示选中的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"imageBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>--&gt;</span><br><span class="line"><span class="comment">&lt;!-- 选取文件框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">".png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2、在js中监听change事件，进行处理（js要放在body后面，否则取不到节点），如果是React需要放在componentDidMount生命周期中执行，也可以直接绑定事件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  监控上传文件的修改事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'file'</span>).onchange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 判断是不是一张图片</span></span><br><span class="line">    <span class="keyword">if</span> (img.type.indexOf(<span class="string">'image'</span>) &gt; <span class="number">-1</span> &amp;&amp; <span class="regexp">/\.(jpe?g|png|bmp)$/</span>.test(img.name)) &#123;</span><br><span class="line">        reader.readAsDataURL(img);</span><br><span class="line">        reader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            http.request()</span><br><span class="line">                .success(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">// 这里替换的是背景，如果是img，直接重写src就可以了</span></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'imageBox'</span>).style.backgroundImage = <span class="string">`url("<span class="subst">$&#123;e.target.result&#125;</span>")`</span>;</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  上传以后置空，防止下次选择同一个文件不会触发onchange事件</span></span><br><span class="line">    e.target.value = <span class="literal">null</span>;</span><br><span class="line">    alert(<span class="string">'请选择一个图片文件'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>参考了MDN的FileReader API：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a></p>
<p>还有一些高级的用法，请查看MDN。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue依赖收集的相关知识]]></title>
      <url>/ckilas0k6007v0xqi9qkxuoth/</url>
      <content type="html"><![CDATA[<p>最近在学习Vue，觉的双向绑定和计算属性很神秘，所以看了下源码</p>
<p>Vue使用基于ES5新增特性<code>Object.defineProperty()</code>的set,get方法进行数据拦截做双向绑定；</p>
<h3 id="非响应式对象"><a href="#非响应式对象" class="headerlink" title="非响应式对象"></a>非响应式对象</h3><p>下面的代码虽然修改了a.name,但是不能感知，我们需要做的怎么部署一个响应的属性，它的变动我们可以做一些事情；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    name:<span class="string">'zhangsan'</span></span><br><span class="line">&#125;;</span><br><span class="line">a.name = <span class="string">'lisi'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="响应式对象"><a href="#响应式对象" class="headerlink" title="响应式对象"></a>响应式对象</h3><p>下面我们用<code>Object.defineProperty()</code>修改一下上面的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    name: &apos;zhansgan&apos;,</span><br><span class="line">    age: 90</span><br><span class="line">&#125;</span><br><span class="line">Object.keys(obj).forEach(key =&gt; &#123;</span><br><span class="line">    let val = obj[key]</span><br><span class="line">    Object.defineProperty(obj, key, &#123;</span><br><span class="line">        set (value) &#123;</span><br><span class="line">            console.log(`set $&#123;key&#125; = $&#123;val&#125;`)</span><br><span class="line">            val = value</span><br><span class="line">        &#125;,</span><br><span class="line">        get () &#123;</span><br><span class="line">            console.log(`get $&#123;key&#125; = $&#123;val&#125;`)</span><br><span class="line">            return val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name)</span><br><span class="line">obj.name = &apos;lisi&apos;</span><br><span class="line">console.log(obj.name)</span><br><span class="line">//  get name = zhansgan</span><br><span class="line">//  zhansgan</span><br><span class="line">//  set name = zhansgan</span><br><span class="line">//  get name = lisi</span><br><span class="line">//  lisi</span><br></pre></td></tr></table></figure>
<p>通过上面的处理，我们读取或者是设置name的时候就会打印消息，所以obj这个对象就变得可观测了，如果修改了，我们也可以做一些事情；<br>还有一个很重要的就是vue的computed特性，我们主要看看是怎么收集依赖的；</p>
<p>在上面的基础上，我们希望在obj上添加一个属性info，这个属性的值决定于obj.name和obj.age，一旦一个发生变化我们修改下info的值，并且info只读<br>假如现在的规则是： obj.info = obj.name + obj.age<br>我们实现可以使用监听name和age的变化，开重新计算info，但是现在只有两个属性还好，要是有多个，我们的程序就难以阅读和控制，例如：<br>obj.info = obj.a + obj.b + obj.c + obj.d</p>
<h3 id="依赖收集原理"><a href="#依赖收集原理" class="headerlink" title="依赖收集原理"></a>依赖收集原理</h3><p>收集依赖主要由三部分构成:Observable（设置对象可观测）,Dep（依赖收集）,Watcher（定义计算属性），主要代码实现如下所示:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  初始化一个依赖的数据，为什么是一个数组，因为一个属性可能被多个computed所依赖</span></span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.deps = []</span><br><span class="line">    &#125;</span><br><span class="line">    depend () &#123;</span><br><span class="line">        <span class="comment">//  此处由依赖的属性收集, 例如  obj.name被obj.info所引用，那个obj.info的监听函数就会自动注册到obj.name的依赖列表上</span></span><br><span class="line">        <span class="keyword">if</span> (Dep.target &amp;&amp; <span class="keyword">this</span>.deps.indexOf(Dep.target) === <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.deps.push(Dep.target)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    notify () &#123;</span><br><span class="line">        <span class="comment">//  一旦被依赖的属性发生了变化就会通知依赖的computed属性进行更新</span></span><br><span class="line">        <span class="keyword">this</span>.deps.forEach(<span class="function"><span class="params">dep</span> =&gt;</span> &#123;</span><br><span class="line">            dep()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.init(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  将obj上第一层所有的属性都定义为可观测的，目前只支持对象的递归观测</span></span><br><span class="line">    init (obj) &#123;</span><br><span class="line">        <span class="comment">//  遍历所有的key</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.defineReactive(obj, key, obj[key])</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    defineReactive (obj, key, val) &#123;</span><br><span class="line">        <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">        <span class="comment">// 如果值还是一个对象，就机柜观测</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(val) === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.init(val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">            <span class="keyword">set</span> (value) &#123;</span><br><span class="line">                val = value;</span><br><span class="line">                <span class="comment">//  值修改以后通知自己的依赖去更新</span></span><br><span class="line">                dep.notify()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">get</span> () &#123;</span><br><span class="line">                dep.depend();</span><br><span class="line">                <span class="keyword">return</span> val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (obj, key, cb, updateFn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.cb = cb;</span><br><span class="line">        <span class="keyword">this</span>.updateFn = updateFn;</span><br><span class="line">        <span class="keyword">this</span>.initComputed()</span><br><span class="line">    &#125;</span><br><span class="line">    initComputed () &#123;</span><br><span class="line">        <span class="keyword">let</span> me = <span class="keyword">this</span>,</span><br><span class="line">            <span class="comment">//  每次更新需要调用的方法</span></span><br><span class="line">            onComputed = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> val = me.cb.call(me.obj);</span><br><span class="line">                me.updateFn(val)</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(me.obj, me.key, &#123;</span><br><span class="line">            <span class="keyword">set</span> () &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'计算属性不能赋值'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">get</span> () &#123;</span><br><span class="line">                <span class="comment">//  添加依赖，如果存在就不重复添加</span></span><br><span class="line">                Dep.target = onComputed;</span><br><span class="line">                <span class="comment">//  这里会调用依赖的字段的get方法，get方法又会去调用dep.depend()，所以就将这个依赖添加到了列表中</span></span><br><span class="line">                <span class="comment">//  使用me.cb.call(me.obj)  这样就可以在cb中使用this获取obj的属性了</span></span><br><span class="line">                <span class="keyword">let</span> val = me.cb.call(me.obj);</span><br><span class="line">                <span class="comment">//  添加完依赖需要情空</span></span><br><span class="line">                Dep.target = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aaa = <span class="keyword">new</span> Observable(&#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Watcher(aaa, <span class="string">'info'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  只要修改依赖项，info就会更新，也会调用这个方法，在Vue总可以在这里渲染dom了</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new '</span>, val)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>下面是测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  测试代码</span></span><br><span class="line"><span class="built_in">console</span>.log(aaa.info);</span><br><span class="line">aaa.age = <span class="number">900</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'outer new '</span>, aaa.info)</span><br><span class="line"><span class="comment">// zhangsan20</span></span><br><span class="line"><span class="comment">// new  zhangsan900</span></span><br><span class="line"><span class="comment">// outer new  zhangsan900</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用path的形式获取对象的属性]]></title>
      <url>/ckilas0ir00540xqi5kq6wm6s/</url>
      <content type="html"><![CDATA[<p>我们在开发的过程中，可能会遇到下面的情况，使用一个字符串获取这个对象的某一个值，也许是这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    info: &#123;</span><br><span class="line">        addr: &#123;</span><br><span class="line">            province: <span class="string">'prov'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getDataByPath(a, <span class="string">'info.addr.province'</span>))</span><br><span class="line"><span class="comment">// prov</span></span><br><span class="line"><span class="built_in">console</span>.log(getDataByPath(a, <span class="string">'info.addr'</span>))</span><br><span class="line"><span class="comment">// &#123;province:'prov'&#125;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>实现思路就是，将传入的path使用“.”来split，然后循环查找，找不到直接返回一个undefined即可，具体实现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  此处的实现没有参考angular</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataByPath</span> (<span class="params">data, path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = path.split(<span class="string">'.'</span>),</span><br><span class="line">        temp = data,</span><br><span class="line">        i=<span class="number">0</span>,</span><br><span class="line">        len=arr.length;</span><br><span class="line">    <span class="keyword">for</span> (;i&lt;len;i++)&#123;</span><br><span class="line">      temp = temp[arr[i]];</span><br><span class="line">      <span class="keyword">if</span> (temp === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决jquery和$http在ie浏览器url中文乱码的问题]]></title>
      <url>/ckilas0jl006r0xqi722l9wdt/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>在ie浏览器中，只要是传递的url后面的中文参数都是乱码的，所以在后台获取的数据并不是我们想要传递的数据，导致数据取不到或者是错误的数据．</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>所以下面就针对jquery和angular的$http进行处理，其他框架原理一样的．</p>
<a id="more"></a>
<ol>
<li>jquery的实现是调用$.ajaxSetup()设置全局的ajax对象．</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, setting</span>) </span>&#123;</span><br><span class="line">        setting.url = <span class="built_in">encodeURI</span>(setting.url || <span class="string">''</span>);　<span class="comment">// 编码url</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>$http需要用到$httpProvider的拦截器功能，实现如下．</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>,　[]) <span class="comment">// 使用你自己定义的模块</span></span><br><span class="line">.config(<span class="function"><span class="keyword">function</span> (<span class="params">$httpProvider</span>) </span>&#123;</span><br><span class="line">    $httpProvider.interceptors.push([<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            request: <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123; </span><br><span class="line">                req.url = <span class="built_in">encodeURI</span>(req.url);</span><br><span class="line">                <span class="keyword">return</span> req;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angularjs </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css中一些实用的方法]]></title>
      <url>/ckilas0hd001x0xqi2x3s49nm/</url>
      <content type="html"><![CDATA[<p><strong>个人在使用的时候用到了一些使用的技巧，就在下面整理了下，不定时更新</strong></p>
<ol>
<li>禁止一个容器上所有的鼠标事件，例如我们不想删除事件重新注册事件的时候很有用</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol start="2">
<li>禁止用户选择某个容器下的文本，当然人家要开F12复制，那也是没有办法的，记得加上浏览器前缀，除非你使用了PostCSS或者是autoprefixer</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>设置非脱离文档流的元素的z-index</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>设置高度是屏幕高度，之前都是通过height:100%从上往下元素都写上，可以使用下面的方法</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>vh是新的单位，就是将屏幕的高度拆分100份，1vh代表1/100窗口高度。</p>
<ol start="5">
<li>使用多个图片做背景图</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:</span><br><span class="line">		<span class="built_in">url</span>(../images/bg2.png) no-repeat bottom,</span><br><span class="line">		<span class="built_in">url</span>(../images/bg1.png) no-repeat top;</span><br><span class="line">	<span class="attribute">background-size</span>: <span class="number">320px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>修改输入框placeholder的样式，注意所有的前缀都需要写上，要不然怕不会生效</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、实用nth-child选中前面n个元素，例如展示进度条的当前进度等</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选中了前三个元素并且设置背景色为绿色 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child(-n+3)</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[页面上有两个ztree时出现的问题]]></title>
      <url>/ckilas0jp00710xqiqt8bkp6o/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>今天在页面上使用了两个ztree，分别都是用class实例化的，导致了下面的情况：<br>后面初始化的tree将前面初始化的tree覆盖了，前面初始化的tree只能显示一个根节点，点击无效，但是点击展开，却展开的是第二个tree；</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>ztree初始化的时候会产生一个treeId，treeId是只读的。如果初始化tree的节点没有id属性，这个treeId初始化以后将会是undefined，所以导致了两个tree生成的id是一样的，后面的覆盖前面的。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>有两个或者多个ztree，渲染的dom上一定要有id属性，防止tree对象出现冲突。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iconfont在chrome中出现锯齿或加粗处理]]></title>
      <url>/ckilas0hl002h0xqipao7mjf9/</url>
      <content type="html"><![CDATA[<p>这是一个神奇的网站：<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a><br>参考地址：<a href="http://blog.sina.com.cn/s/blog_6cbbde3f0102vw2s.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_6cbbde3f0102vw2s.html</a></p>
<p>使用阿里的iconfont在chrome中出现了毛边锯齿的问题，解决方案<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这个值的大小可以在浏览器中调整查看结果*/</span></span><br><span class="line"><span class="selector-class">.iconfont</span>&#123;</span><br><span class="line">  <span class="attribute">-webkit-text-stroke-width</span>:<span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/*加粗的情况可以使用下面的代码处理，iconfont已经处理了*/</span></span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript加载优化技巧]]></title>
      <url>/ckilas0ho002o0xqiyw5j6emf/</url>
      <content type="html"><![CDATA[<p>参考了&lt;&lt;高性能javascript&gt;&gt;,看了下面的技巧</p>
<blockquote>
<p>减少script标签的数量（减少请求的数目）<br>将script标签放在body下面，防止阻止页面渲染<br>动态脚本，在javascript中使用代码创建script节点</p>
</blockquote>
<p>动态脚本主要有下面的实现方式：<br><a id="more"></a><br>使用创建script标签然后使用的方式，实现如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sc = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">sc.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">sc.src = <span class="string">"file1.js"</span>;</span><br><span class="line"><span class="keyword">if</span> (sc.readyState)&#123; <span class="comment">// IE的回调</span></span><br><span class="line">  sc.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sc.readyState === <span class="string">'loaded'</span> || sc.readyState === <span class="string">'complete'</span>)&#123;</span><br><span class="line">      sc.onreadystatechange = <span class="literal">null</span>; <span class="comment">// 清理引用</span></span><br><span class="line">      alert(<span class="string">'loaded'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  sc.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'loaded'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(sc);</span><br></pre></td></tr></table></figure></p>
<p>使用XMLHttpRequest注入脚本，实现如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用的原理是将js代码请求过来加到内链的script上</span></span><br><span class="line"><span class="comment">// 只有追加在head才会执行</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'file1.js'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;=<span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> sc = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      sc.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">      sc.text = xhr.responseText;</span><br><span class="line">      <span class="built_in">document</span>.getElementsByName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(sc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Vue生成的项目中添加eslint全局规则]]></title>
      <url>/ckilas0j6005s0xqiwidju27m/</url>
      <content type="html"><![CDATA[<p>在Vue-cli生成的项目中会自带eslint插件来校验代码，有时候我们需要加入全局的$插件，就是在模块中不引入$就可以使用；<br>简单的方法就是，创建一个模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line">$.test = <span class="string">'message test'</span></span><br><span class="line"><span class="built_in">window</span>.$ = $</span><br></pre></td></tr></table></figure></p>
<p>在项目的入口处导入这个模块就全局引入了，但是在别的模块中不通过<code>import $ from &#39;jquery&#39;</code>使用$就会报错，提示$没有定义，所以我们需要配置下eslint的配置。修改<code>.eslintrc.js</code>文件，添加<code>globals</code>节点，修改结果如下，注意注释部分，配置参考<a href="http://eslint.org/docs/user-guide/configuring" target="_blank" rel="noopener">http://eslint.org/docs/user-guide/configuring</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: <span class="string">'standard'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//  加入全局的检查，遇到$的时候不会报没有定义</span></span><br><span class="line">  globals: &#123;</span><br><span class="line">    $: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Vue动态加载组件和路由]]></title>
      <url>/ckilas0ih004j0xqiryrau7mg/</url>
      <content type="html"><![CDATA[<p>在我们开发Vue项目的过程中，架构一般都会设计为SPA，如果所有的组件和路由都加载，打包后的文件会达到几兆或者几十兆。</p>
<p>对于网络快的用户倒是无所谓了，但是还有很大的一部分用户的网络并不理想，这就导致首次加载页面的时候花费的时间很长，导致用户没有继续访问的欲望。<br>所以在我们的项目中用了按需加载的方式加载组件和路由。</p>
<a id="more"></a>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>主框架：Vue2<br>打包工具：Webpack<br>路由工具：Vue-router</p>
<p>下面就先演示下怎么异步加载一个组件<a href="http://cn.vuejs.org/v2/guide/components.html#异步组件" target="_blank" rel="noopener">http://cn.vuejs.org/v2/guide/components.html#异步组件</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是都会用到的组件，所以就挂载到全局上面</span></span><br><span class="line"><span class="comment">// Vue.component接受一个promise对象，通过webpack内置的require动态加载一个组件，只用使用的时候才会去加载</span></span><br><span class="line">Vue.component(<span class="string">'Navbar'</span>, resolve =&gt; &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">'@/components/Navbar.vue'</span>], resolve)</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'Pagination'</span>, resolve =&gt; &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">'@/components/Pagination.vue'</span>], resolve)</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'AppItem'</span>, resolve =&gt; &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">'@/components/AppItem.vue'</span>], resolve)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 下面使用es2015的形式创建一个异步组件</span></span><br><span class="line">Vue.component(</span><br><span class="line">  <span class="string">'AppItem'</span>, () =&gt; <span class="keyword">import</span>(<span class="string">'@/components/AppItem.vue'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>下面是Vue-router加载一个异步的模块,详细: <a href="http://router.vuejs.org/zh-cn/advanced/lazy-loading.html" target="_blank" rel="noopener">http://router.vuejs.org/zh-cn/advanced/lazy-loading.html</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">    path: <span class="string">'/appsearch'</span>,</span><br><span class="line">    name: <span class="string">'appsearch'</span>,</span><br><span class="line">    <span class="comment">//  这里和Vue中使用的一致的</span></span><br><span class="line">    component (resolve) &#123;</span><br><span class="line">      <span class="built_in">require</span>([<span class="string">'@/pages/AppSearch.vue'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flexbox左右布局宽度固定]]></title>
      <url>/ckilas0hh00270xqihdbixo5t/</url>
      <content type="html"><![CDATA[<p>flex盒子我在使用的时候发现一个问题，左侧宽度一定，右边自适应，但是右边内容过大的时候就会把左边的部分变小,需要设置下面的属性</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>; <span class="comment">//  TODO 即使空间不够也不缩小,默认是1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="selector-class">.item-flex1</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在CentOS6上安装mysql5.6并开启远程登录]]></title>
      <url>/ckilas0fx00020xqi6hn9w2m7/</url>
      <content type="html"><![CDATA[<p>CentOS6库里面是mysql 5.1,由于mysql 5.1有乱码的问题和工作需要,在网上查询资料进行安装mysql5.6</p>
<p>1、 下载对应的仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure></p>
<p>2、 安装下载好的仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> yum install mysql-community-release-el6-5.noarch.rpm</span><br><span class="line"> yum repolist enabled | grep mysql</span><br><span class="line"> </span><br><span class="line"><span class="comment"># mysql-connectors-community    MySQL Connectors Community   42</span></span><br><span class="line"><span class="comment"># mysql-tools-community         MySQL Tools Community        36</span></span><br><span class="line"><span class="comment"># mysql56-community             MySQL 5.6 Community Server  227</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>3、 安装mysql5.6  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<p>4、 设置密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password <span class="string">'admin'</span></span><br><span class="line">/usr/bin/mysqladmin -u root -h linux32 password <span class="string">'admin'</span></span><br><span class="line">/usr/bin/mysqladmin -u root -h localhost password <span class="string">'admin'</span></span><br></pre></td></tr></table></figure></p>
<p>5、设置远程登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 授权所有的权限给root和任意host(%)，密码是admin</span></span><br><span class="line">mysql&gt; grant all privileges on *.* to root@<span class="string">"%"</span> identified by <span class="string">"admin"</span>;</span><br><span class="line"><span class="comment"># 刷新权限；或者退出重启mysql服务</span></span><br><span class="line">mysql&gt; flush privileges</span><br></pre></td></tr></table></figure></p>
<p>使用其他的客户机使用sqlyog等客户端就可以连接了</p>
<p>Link: <a href="http://www.cnblogs.com/lzj0218/p/5724446.html" target="_blank" rel="noopener">http://www.cnblogs.com/lzj0218/p/5724446.html</a></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mui消息推送并且显示角标]]></title>
      <url>/ckilas0i7003y0xqi3wawe31i/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mui.plusReady(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 推送消息</span></span><br><span class="line">  plus.push.createMessage(msg.msg, <span class="literal">null</span>, &#123;</span><br><span class="line">    title: msg.title</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 清空消息</span></span><br><span class="line">  plus.push.clear();</span><br><span class="line">  <span class="comment">// 设置角标(设置角标的时候先把plus.push.clear了，否则会一直叠加上去的)</span></span><br><span class="line">  plus.runtime.setBadgeNumber(count);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websql在ios平台上查询出来取值为null]]></title>
      <url>/ckilas0ic00480xqi1mjwr9lk/</url>
      <content type="html"><![CDATA[<p>做过移动项目的同学都知道，为了加快app的运行速度，许多静态的数据可以存储在本地的websql中，今天我就遇到一个问题：</p>
<blockquote>
<p>websql 查出来的数据在安卓系统上可以正常的显示，但是在IOS上却显示的全是NULL</p>
</blockquote>
<a id="more"></a>
<p>究其原因，通过自己不懈努力的百度和ding先生的帮助，终于知道，ios上和安卓上存储的结构有所不同，下面是一个查询函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理参数，例如 &#123;name:'zhangsan',age:56&#125; =&gt; " where 1=1 and name='zhangsan' and age=56"</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">params</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;&#123;append: string, fill: Array&#125;</span></span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveCondition</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramArr = [],</span><br><span class="line">        append = <span class="string">' where 1=1'</span>;</span><br><span class="line">    <span class="built_in">Object</span>.keys(params).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        paramArr.push(params[key]);</span><br><span class="line">        append += <span class="string">' and '</span> + key + <span class="string">'=?'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        append: append,</span><br><span class="line">        fill: paramArr</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>params  查询参数，</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>callback  回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">params, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>,</span><br><span class="line">        condition = resolveCondition(params);  <span class="comment">//  处理条件</span></span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">'select * from '</span> + me.tableName + condition.append;  <span class="comment">// 拼接sql语句</span></span><br><span class="line">    <span class="comment">//  执行查询</span></span><br><span class="line">    db.transaction(<span class="function"><span class="keyword">function</span> (<span class="params">tx</span>) </span>&#123;</span><br><span class="line">        tx.executeSql(sql, condition.fill, <span class="function"><span class="keyword">function</span> (<span class="params">tx, res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  res.rows是一个类数组对象，有length属性</span></span><br><span class="line">            <span class="comment">//  在android上可以使用[].slice.call(res.rows)转化成真正的数组，数据能正常显示</span></span><br><span class="line">            <span class="comment">//  在ios也可以使用[].slice.call(res.rows)转化成真正的数组，但是所有的项都是null</span></span><br><span class="line">            <span class="comment">//  这个类数组对象有一个item(index)方法,可以根据下标来获取数据，兼容安卓和IOS，所以就出现了下面的解决方法</span></span><br><span class="line">            <span class="keyword">var</span> length = res.rows.length,</span><br><span class="line">                result = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                result.push(res.rows.item(i));</span><br><span class="line">            &#125;</span><br><span class="line">            callback &amp;&amp; callback(<span class="number">0</span>, result);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback &amp;&amp; callback(<span class="number">1</span>, <span class="string">'query error'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是解决方案的描述</p>
<ul>
<li>res.rows是一个类数组对象，有length属性</li>
<li>在android上可以使用[].slice.call(res.rows)转化成真正的数组，数据能正常显示</li>
<li>在ios也可以使用[].slice.call(res.rows)转化成真正的数组，但是所有的项都是null</li>
<li>这个类数组对象有一个item(index)方法,可以根据下标来获取数据，兼容安卓和IOS，所以使用item取数据</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解Function的bind,apply,call方法]]></title>
      <url>/ckilas0jj006n0xqiqn431ype/</url>
      <content type="html"><![CDATA[<p>简单来说，call、apply、bind都是改变函数执行上下文，也就是this的指向。</p>
<p>先说一下他们的相同点：</p>
<blockquote>
<p>1、 调用方式，都是通过functionName.[call|apply|bind]调用的。<br>2、 作用，都是为了修改函数的执行上下文，也就是this对象。<br>3、 都是Function对象内置的方法。</p>
</blockquote>
<a id="more"></a>
<p>下面说一下不同点吧：</p>
<blockquote>
<p>1、 apply和call改变function的执行上下文并且执行这个函数。<br>2、 bind不改变原函数的上下文，但是返回一个新的函数，新函数的执行上下文就是bind指定的对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'lisi'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">say();  <span class="comment">//  zhangsan</span></span><br><span class="line">say.call(obj);  <span class="comment">//  lisi ，只改变执行上下文</span></span><br><span class="line">say.apply(obj); <span class="comment">// lisi ， 只改变执行上下文</span></span><br><span class="line">say.bind(obj)(); <span class="comment">// lisi ， bind会产生一个新的函数，this指向的是obj ,想得到结果就需要再执行一下</span></span><br></pre></td></tr></table></figure>
<p>下面说一下apply和call的不同之处：</p>
<blockquote>
<p>1、 apply传参数的形式是，apply(scope,argumentArray);<br>2、 call传递参数的形式是，call(scope,arg1,arg2,arg3…)</p>
</blockquote>
<p>可以看出apply除了作用域，其他参数的形式是以类数组的形式传递，call是按照顺序的传递的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 求上面数组的最大值有下面的方式</span></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>,arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的三种方式，第一种第二种不适合数组求最大值,apply方法就轻而易举的解决了这个问题</span></span><br><span class="line"><span class="comment">// 所以，目前个人总结：明确参数个数的可以使用call调用,不明确参数个数的可以使用apply，例如下面使用方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面也是通过call和apply实现集成的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubUser</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  固定有两个参数，如果User方法添加了新的参数，就需要修改这个方法</span></span><br><span class="line">  User.call(<span class="keyword">this</span>,name,age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubUser2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  在这里，我们按照User的顺序去执行方法，也就是User的参数修改了，我们这里不用修改</span></span><br><span class="line">  <span class="comment">//  不管User方法的参数怎么修改，只要调用SubUser2的参数顺序和User的保持一致就好了</span></span><br><span class="line">  User.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>bind参数部分和call有些类似，bind第一个参数是上下文，剩余的参数会传递到新函数参数的首部，例如</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">80</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, <span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> say2 = say.bind(user, <span class="string">'lisi'</span>);</span><br><span class="line"></span><br><span class="line">say2(); <span class="comment">// lisi zhangsan 80</span></span><br><span class="line"><span class="comment">// 我们发现把lisi传到了参数里面，这个是个传递额外的参数</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mui框架在echarts页面子页面返回导致图空白]]></title>
      <url>/ckilas0i6003v0xqitow5qw77/</url>
      <content type="html"><![CDATA[<p>在使用mui进行开发的时候，echarts出现了下面的情况：</p>
<blockquote>
<p>在存在echart的页面点击跳转到新的页面，再回退回来的时候echarts就不显示了，除非点一下响应区域（点击有效果的地方）</p>
</blockquote>
<p>下面是一个很简单粗暴的方案，后期如果有新的好的方案，请回复此贴。<br>1、首先在echarts的页面加上事件的监听，执行echarts的resize操作<br><a id="more"></a><br>JS部分<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'goback'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    vm.$refs.line.resize();  <span class="comment">//  在这里  此处的VM是vue的实例 line是组件的依赖</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>HTML部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加ref属性可以在vm.$refs中调用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">chart</span> <span class="attr">ref</span>=<span class="string">"line"</span> <span class="attr">:options</span>=<span class="string">"opts"</span>&gt;</span><span class="tag">&lt;/<span class="name">chart</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>2、在进入的页面上加上返回回调<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.init(&#123;</span><br><span class="line">    beforeback: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  通知有echarts的页面触发返回事件，下面就通知了两个页面，分别是xxx.html和xxx2.html  </span></span><br><span class="line">        <span class="comment">//  其中xxx.html和xxx2.html是页面的id</span></span><br><span class="line">        $.fire(plus.webview.getWebviewById(<span class="string">'xxx.html'</span>), <span class="string">'goback'</span>);</span><br><span class="line">        $.fire(plus.webview.getWebviewById(<span class="string">'xxx2.html'</span>), <span class="string">'goback'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现快速排序]]></title>
      <url>/ckilas0hq002s0xqivqxircjr/</url>
      <content type="html"><![CDATA[<p>参考：<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html</a><br>“快速排序”的思想很简单，整个排序过程只需要三步<br>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>
<a id="more"></a>
<p>下面是代码实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">　　<span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>); <span class="comment">// 获取基准的坐标</span></span><br><span class="line">　　<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];　<span class="comment">// 获取基准值</span></span><br><span class="line">　　<span class="keyword">var</span> left = [];　</span><br><span class="line">　　<span class="keyword">var</span> right = [];</span><br><span class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">　　　　　　left.push(arr[i]);</span><br><span class="line">　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　right.push(arr[i]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让图片和文本在div中居中]]></title>
      <url>/ckilas0jm006u0xqirkb3e4fy/</url>
      <content type="html"><![CDATA[<p>很多时候我们会有下面的结构，但是图片和文本总是不居中的<br>CSS代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>HTML代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"abc.png"</span>&gt;</span> 这是一张图片的简介</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>解决方案1：给img做垂直居中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.middle</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解决方案2：使用flex布局（但是老的浏览器可能不支持）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现折半查找算法]]></title>
      <url>/ckilas0hr002v0xqi27q51s7k/</url>
      <content type="html"><![CDATA[<p>二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。查找过程可以分为以下步骤<br>（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。<br>（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。<br>（3）如果某一步数组为空，则表示找不到目标元素。</p>
<a id="more"></a>
<p>下面是代码实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> low = <span class="number">0</span>,</span><br><span class="line">        high = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(key === arr[mid])&#123;</span><br><span class="line">            <span class="keyword">return</span>  mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[mid])&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; arr[mid])&#123;</span><br><span class="line">            high = mid <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">// 递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search2</span>(<span class="params">arr,low, high, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((high + low) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(arr[mid] === key)&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key)&#123;</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, low, high, key);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key)&#123;</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, low, high, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu中使用命令行连接wifi网络]]></title>
      <url>/ckilas0h6001l0xqilcpk4yq6/</url>
      <content type="html"><![CDATA[<p>如果你使用的Ubuntu Server或者是像我一样的手欠，把桌面环境搞挂了，但是由没有网线可以上网恢复，但是有无线网可以使用，可以跟着下面做</p>
<p>1、 在Ubuntu中网络连接是NetworkManager代理的，所以我们先关闭NetworkManager服务，Server版本直接跳过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager stop</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2、 先检查无线网卡有没有开启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (本地环回)</span><br><span class="line">        RX packets 10972  bytes 1590822 (1.5 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 10972  bytes 1590822 (1.5 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></p>
<p>我们只看到一条lo记录，那就说明我们没有开启无线网卡，使用以下<code>任意一个命令</code>开启，此处就wlan0举例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifup wlan0</span><br><span class="line">ifconfig wlan0 up</span><br><span class="line">iwconfig wlan0 txpower on</span><br></pre></td></tr></table></figure></p>
<p>执行完上面的命令继续使用<code>ifconfig</code>查看网卡，显示如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (本地环回)</span><br><span class="line">        RX packets 11344  bytes 2088766 (2.0 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 11344  bytes 2088766 (2.0 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 9a:c5:f9:25:0d:05  txqueuelen 1000  (以太网)</span><br><span class="line">        RX packets 1359035  bytes 1853939996 (1.8 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 949865  bytes 95687031 (95.6 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></p>
<p>我们已经看到了<code>wlan0</code>，说明启动无线网卡成功了。<br>3、 下面我们扫描所有的WiFi，找到我们需要连接的Wifi就可以连接了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">iwlist wlan0 scan | grep ESSID <span class="comment"># 查询所有可用的SSID</span></span><br><span class="line">ESSID:<span class="string">"we are family"</span></span><br><span class="line">ESSID:<span class="string">"fengyingdongdong"</span></span><br><span class="line">ESSID:<span class="string">"HOME403"</span></span><br><span class="line">ESSID:<span class="string">"CMCC-LuF6"</span></span><br><span class="line">ESSID:<span class="string">"CMCC-5Gem"</span></span><br><span class="line">ESSID:<span class="string">"wuxian"</span></span><br><span class="line">ESSID:<span class="string">"TP-LINK_F6F6"</span></span><br><span class="line">ESSID:<span class="string">"Xiaomi_whp"</span></span><br></pre></td></tr></table></figure></p>
<p>4、 我们已经得到了所有的wifi列表，就以<code>wuxian</code>为例子连接一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wpa_passphrase wuxian &gt; wifi.conf <span class="comment"># 回车后输入密码，继续回车就会生成配置文件，这一步为了将我们的密码转化成系统能识别的密码</span></span><br><span class="line">wpa_supplicant -iwlan0 -cwifi.conf -B <span class="comment"># -B 后台运行 -i 选择网卡 -c 选择配置文件</span></span><br></pre></td></tr></table></figure></p>
<p>5、 我们需要配置一下dhcp获取IP地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dhclient -r</span><br><span class="line">dhclient wlan0  <span class="comment">#  wlan0是网卡的名字，不是随便乱写的，和上面的保持一致</span></span><br></pre></td></tr></table></figure></p>
<p>6、 完成了上面的步骤，先试试能不能上网，如果不能上网，那应该是dns的问题，所以进一步配置dns<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf <span class="comment"># 加上一行</span></span><br><span class="line">nameserver 192.168.2.1 <span class="comment"># 后面的ip根据你的应用场景而定，路由器一般是192.168.0.1,192.168.2.1,192.168.1.1</span></span><br></pre></td></tr></table></figure></p>
<p>现在试一下，就可以上网了，测试能不能上网很简单 <code>ping www.baidu.com</code> 如果有响应，那就是可以上网了，响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PING www.a.shifen.com (119.75.216.20) 56(84) bytes of data.</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=1 ttl=56 time=23.6 ms</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=2 ttl=56 time=190 ms</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=3 ttl=56 time=39.9 ms</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=4 ttl=56 time=8.03 ms</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=5 ttl=56 time=4.86 ms</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=6 ttl=56 time=11.8 ms</span><br><span class="line">64 bytes from 119.75.216.20: icmp_seq=7 ttl=56 time=8.44 ms</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用js实现斐波那契数列]]></title>
      <url>/ckilas0in004x0xqibm8bxoqv/</url>
      <content type="html"><![CDATA[<p>使用js实现斐波那契数列,生成的数组如下所示</p>
<blockquote>
<p>[ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 ]</p>
</blockquote>
<p>从上面的数组我们看出了规律,第一个和第二个是固定的,分别是0和1,后面的数就是前面的数之和。<br>实现方式主要有下面的两种方式，第<code>一</code>种是递归的方式实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n 数组的第几个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下面使用的第<code>二</code>种方式，使用递推的方式实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n 数组的第几个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n1 = <span class="number">0</span>, n2 = <span class="number">1</span>, sn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        sn = n1 + n2; <span class="comment">// 计算本次的</span></span><br><span class="line">        n1 = n2;  <span class="comment">//  第一个值用第二个值替换</span></span><br><span class="line">        n2 = sn; <span class="comment">// 第二个为本次计算的值</span></span><br><span class="line">        <span class="comment">// n=3 =&gt; sn=0+1 =&gt; n1=1 =&gt; n2=1</span></span><br><span class="line">        <span class="comment">// n=4 =&gt; sn=1+1 =&gt; n1=1 =&gt; n2=2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成长度为10的斐波那契数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>, arr = [];</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">15</span>) &#123;</span><br><span class="line">    arr.push(fibonacci(i++));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// result [ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 ]</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Maven搭建一个SpringMVC的项目]]></title>
      <url>/ckilas0j9005z0xqi74eimxxj/</url>
      <content type="html"><![CDATA[<p>最近公司需要开发一个API文档管理系统，又捡起来好久不见的Java（PS：本人现在是一个前端程序员），由于之前使用Java开发过项目，所以打算基于SpringMVC进行开发。</p>
<a id="more"></a>
<p>项目使用的技术：</p>
<blockquote>
<p>SpringMVC + MySQL + Gson + Proxool + Vue</p>
</blockquote>
<p>本文的依赖环境（如果没有安装，请自行百度安装）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T03:39:06+08:00)</span><br><span class="line">Java version: 1.8.0_121, vendor: Oracle Corporation</span><br></pre></td></tr></table></figure></p>
<p>本文主要记载基于Maven的SpringMVC项目的搭建，本文使用的开发环境是<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>，下文中称之为IDEA，是目前用的比较火的一个工具，开发效率很高。</p>
<p>主要分为下面几步完成</p>
<ol>
<li><a href="#1">使用IDEA创建一个项目</a></li>
<li><a href="#2">在pom.xml中添加依赖</a></li>
<li><a href="#3">添加数据库配置文件</a></li>
<li><a href="#4">添加spring配置文件</a></li>
<li><a href="#5">添加springMVC配置文件</a></li>
<li><a href="#6">修改web.xml配置spring</a></li>
<li><a href="#7">创建一个controller</a></li>
</ol>
<p><a name="1"></a></p>
<h3 id="使用IDEA创建一个项目"><a href="#使用IDEA创建一个项目" class="headerlink" title="使用IDEA创建一个项目"></a>使用IDEA创建一个项目</h3><p>1、创建Maven项目，选择webapp模板<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/maven1-cIApCn.png" alt="maven1"></p>
<p>2、填写项目对应的信息，一路回车就好了<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/maven2-HDwzH0.png" alt="maven2"></p>
<p>查看生成的目录，没有java源目录，需要手动创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   └── main</span><br><span class="line">│       ├── resources</span><br><span class="line">│       └── webapp</span><br><span class="line">│           ├── index.jsp</span><br><span class="line">│           └── WEB-INF</span><br><span class="line">│               └── web.xml</span><br><span class="line">└── workstore.iml</span><br></pre></td></tr></table></figure></p>
<p><a name="2"></a></p>
<h3 id="在pom-xml中添加依赖"><a href="#在pom-xml中添加依赖" class="headerlink" title="在pom.xml中添加依赖"></a>在pom.xml中添加依赖</h3><p>本项目是基于springmvc进行开发的，下面是pom.xml的完整配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.webrepos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>workstore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>workstore Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接mysql必须加载的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springmvc核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.17.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- proxool连接池，可能在maven仓库的是0.8的，这就需要手动下载jar包，放在本地 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>proxool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proxool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 必须的，否则会出错 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>proxool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proxool-cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaee必须的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- json响应支持 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- google json工具库，提供解析json等功能 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>workstore<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a name="3"></a></p>
<h3 id="添加数据库配置文件"><a href="#添加数据库配置文件" class="headerlink" title="添加数据库配置文件"></a>添加数据库配置文件</h3><p>本项目采用proxool数据库连接池，所以在resources下创建jdbc.properties，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306/webstore</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=admin</span><br></pre></td></tr></table></figure></p>
<p><a name="4"></a></p>
<h3 id="添加spring配置文件"><a href="#添加spring配置文件" class="headerlink" title="添加spring配置文件"></a>添加spring配置文件</h3><p>在resources创建一个spring.xml，内容如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载jdbc配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Proxool连接池，使用jdbc配置文件注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.logicalcobwebs.proxool.ProxoolDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring提供的jdbcTemplate工具，进行数据库的操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queryTimeout"</span> <span class="attr">value</span>=<span class="string">"300000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a name="5"></a></p>
<h3 id="添加springMVC配置文件"><a href="#添加springMVC配置文件" class="headerlink" title="添加springMVC配置文件"></a>添加springMVC配置文件</h3><p>在resources创建一个spring-mvc.xml，内容如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/app/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.webrepos.workstore"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSON支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a name="6"></a></p>
<h3 id="修改web-xml配置spring"><a href="#修改web-xml配置spring" class="headerlink" title="修改web.xml配置spring"></a>修改web.xml配置spring</h3><p>上面的步骤已经创建了spring.xml和spring-mvc.xml，现在项目中启用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 初始化spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring-mvc默认的servlet = DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a name="7"></a></p>
<h3 id="创建一个controller"><a href="#创建一个controller" class="headerlink" title="创建一个controller"></a>创建一个controller</h3><p>由于初始化的时候没有java的源文件目录,所以需要手动的添加目录,在main下面创建java目录,右键设置为源码目录,操作:</p>
<blockquote>
<p>Mark Directory as =&gt; Source Root</p>
</blockquote>
<p>在java目录下创建一个包,名为<code>com.webrepos.workstore.controller</code>,在该包下创建一个HelloController,将下面的代码粘贴进去<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.webrepos.workstore.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>部署在tomcat,然后启动tomcat,在浏览器输入:<a href="http://localhost:8080/test" target="_blank" rel="noopener">http://localhost:8080/test</a>,就能看到<code>hello world</code>了<br><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/2020/06/maven3-QJtGu3.png" alt="maven3"></p>
<p>一个完整的应用就搭建起来了．<br>后面会加入mybatis的相关配置</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用vue封装一个简单echarts组件]]></title>
      <url>/ckilas0iv005e0xqip68a0u2r/</url>
      <content type="html"><![CDATA[<p>支持的功能：<br>1、 数据监听刷新echarts图<br>2、 外部方法调用,主要是通过vue实例的$refs调用<br>3、 垃圾回收，页面销毁自动清理添加的变量</p>
<p>使用方法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 300px;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--opts是echarts的配置，详情请查看echarts官方网站（echarts.baidu.com）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chart</span> <span class="attr">:options</span>=<span class="string">"opts"</span>&gt;</span><span class="tag">&lt;/<span class="name">chart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>主要代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $ = <span class="built_in">window</span>.$,</span><br><span class="line">		Vue = <span class="built_in">window</span>.Vue,</span><br><span class="line">		echarts = <span class="built_in">window</span>.echarts;</span><br><span class="line">	<span class="comment">//  设置默认的宽度和高度</span></span><br><span class="line">	<span class="keyword">var</span> size = &#123;</span><br><span class="line">		height: <span class="string">'100%'</span>,</span><br><span class="line">		width: <span class="string">'100%'</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//  设置默认的options</span></span><br><span class="line">	<span class="keyword">var</span> defaults = &#123;</span><br><span class="line">		tooltip: &#123;</span><br><span class="line">			show: <span class="literal">false</span></span><br><span class="line">		&#125;,</span><br><span class="line">		toolbox: &#123;</span><br><span class="line">			show: <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 设置可触发的事件</span></span><br><span class="line">	<span class="keyword">var</span> events = [</span><br><span class="line">		<span class="string">'click'</span>,</span><br><span class="line">		<span class="string">'dblclick'</span>,</span><br><span class="line">		<span class="string">'mouseover'</span>,</span><br><span class="line">		<span class="string">'mouseout'</span>,</span><br><span class="line">		<span class="string">'mousedown'</span>,</span><br><span class="line">		<span class="string">'mouseup'</span>,</span><br><span class="line">		<span class="string">'globalout'</span></span><br><span class="line">	];</span><br><span class="line">	<span class="comment">// 设置可执行的方法</span></span><br><span class="line">	<span class="keyword">var</span> methods = [</span><br><span class="line">		<span class="string">'dispatchAction'</span>,</span><br><span class="line">		<span class="string">'showLoading'</span>,</span><br><span class="line">		<span class="string">'hideLoading'</span>,</span><br><span class="line">		<span class="string">'getWidth'</span>,</span><br><span class="line">		<span class="string">'getHeight'</span>,</span><br><span class="line">		<span class="string">'getOption'</span>,</span><br><span class="line">		<span class="string">'clear'</span>,</span><br><span class="line">		<span class="string">'resize'</span></span><br><span class="line">	];</span><br><span class="line">	<span class="comment">// 主要的配置参数</span></span><br><span class="line">	<span class="keyword">var</span> factory = &#123;</span><br><span class="line">		props: [<span class="string">'options'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>],</span><br><span class="line">		template: <span class="string">'&lt;div&gt;&lt;/div&gt;'</span>,</span><br><span class="line">		data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> &#123;</span><br><span class="line">				chart: <span class="literal">null</span>,</span><br><span class="line">				_resize: <span class="literal">null</span></span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;,</span><br><span class="line">		mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.options) &#123;</span><br><span class="line">				<span class="keyword">this</span>._init();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		watch: &#123;</span><br><span class="line">			options: &#123;</span><br><span class="line">				handler: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(!<span class="keyword">this</span>.chart &amp;&amp; options) &#123;</span><br><span class="line">						<span class="keyword">this</span>._init()</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">							<span class="keyword">this</span>.chart.setOption($.extend(<span class="literal">true</span>, &#123;&#125;, defaults, <span class="keyword">this</span>.options), <span class="literal">true</span>);</span><br><span class="line">						&#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				deep: <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			_init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.chart) <span class="keyword">return</span>;</span><br><span class="line">				<span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">				<span class="keyword">this</span>.$el.style.width = <span class="keyword">this</span>.width || size.width;</span><br><span class="line">				<span class="keyword">this</span>.$el.style.height = <span class="keyword">this</span>.height || size.height;</span><br><span class="line">				<span class="keyword">var</span> chart = echarts.init(<span class="keyword">this</span>.$el); <span class="comment">//  初始化echarts组件</span></span><br><span class="line">				chart.setOption($.extend(<span class="literal">true</span>, &#123;&#125;, defaults, <span class="keyword">this</span>.options), <span class="literal">true</span>);</span><br><span class="line">				<span class="comment">//	添加随着窗口变化自动监听</span></span><br><span class="line">				<span class="keyword">this</span>._resize = chart.resize;</span><br><span class="line">				<span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>._resize);</span><br><span class="line">				<span class="comment">//	添加事件</span></span><br><span class="line">				events.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">					chart.on(e, <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">						me.$emit(e, params);</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="comment">//  挂载chart</span></span><br><span class="line">				<span class="keyword">this</span>.chart = chart;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		* 组件销毁的时候处理变量和事件</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">		beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="keyword">this</span>.chart) <span class="keyword">return</span>;</span><br><span class="line">			<span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>._resize);</span><br><span class="line">			<span class="keyword">this</span>.chart.dispose();</span><br><span class="line">			<span class="keyword">this</span>.chart = <span class="literal">null</span>;</span><br><span class="line">			<span class="keyword">this</span>._resize = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加echarts的方法</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	methods.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">		factory.methods[m] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.chart[m].apply(<span class="keyword">this</span>.chart, [].slice.apply(<span class="built_in">arguments</span>));</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">//  全局注册组件，可以使用标签的形式引入</span></span><br><span class="line">	Vue.component(<span class="string">'chart'</span>, factory);</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用js将秒转化为"天时分秒"的时长形式]]></title>
      <url>/ckilas0io00500xqiq6wkz0zy/</url>
      <content type="html"><![CDATA[<p>现在有这样一个需求，后台存储的使用时长时秒为单位，我们需要转化成下面的形式</p>
<blockquote>
<p>100 =&gt; 1分40秒<br>3611 =&gt; 1小时0分11秒<br>…</p>
</blockquote>
<p>所以我就编写了下面的函数进行转化，功能实现了，但是还待优化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    input = <span class="built_in">Number</span>(input);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">Math</span>.floor(input / (<span class="number">3600</span> * <span class="number">24</span>)),</span><br><span class="line">        h = <span class="built_in">Math</span>.floor((input % (<span class="number">3600</span> * <span class="number">24</span>)) / <span class="number">3600</span>),</span><br><span class="line">        m = <span class="built_in">Math</span>.floor((input % <span class="number">3600</span>) / <span class="number">60</span>),</span><br><span class="line">        s = (input % <span class="number">60</span>),</span><br><span class="line">        result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (d) &#123;</span><br><span class="line">        result += d + <span class="string">'天'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (h) &#123;</span><br><span class="line">        result += h + <span class="string">'时'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m) &#123;</span><br><span class="line">        result += m + <span class="string">'分'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result += s + <span class="string">'秒'</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convert(<span class="number">1000</span>); <span class="comment">// 16分40秒</span></span><br><span class="line">convert(<span class="number">56</span>); <span class="comment">// 56秒</span></span><br><span class="line">convert(<span class="number">562547</span>); <span class="comment">// 6天12时15分47秒</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js获取最近一周的时间]]></title>
      <url>/ckilas0hu00330xqihsjr9ply/</url>
      <content type="html"><![CDATA[<p>JavaScript中时间的表现形式有:<code>Number,String,Date</code>,都可以使用<code>new Date()</code>转化成标准的<code>Date</code>类型.</p>
<p>下面我介绍一种Number类型时间的计算方式,Number类型的时间是以毫秒的形式存储的,换算如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1s = 1000ms  // 1秒=1000毫秒</span><br><span class="line">1m = 60s     // 1分钟=60秒</span><br><span class="line">1h = 60m     // 1小时=60秒</span><br><span class="line">1d = 24h     // 1天=24小时</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>由上面的规则可以得出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1d = 24 * 60 * 60 * 1000ms</span><br></pre></td></tr></table></figure></p>
<p>下面就是实现最近一周时间的一个方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取最近一周的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nearOneWeek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">p1</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatDate(now - (p1 * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>), <span class="string">'M-d'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上文中有一个<code>formatDate</code>方法,请点击<a href="/2017/05/03/使用js写一个日期格式化函数/">这里查看</a>.</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用js写一个日期格式化函数]]></title>
      <url>/ckilas0il004t0xqi844oxihv/</url>
      <content type="html"><![CDATA[<p>有时候我们需要对时间做一下格式化,例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Wed May 03 2017 22:33:22 GMT+0800 (CST)  =&gt;  2017/05/03</span><br><span class="line">1493822039042  =&gt; 2017/05/03 22:33</span><br></pre></td></tr></table></figure></p>
<p>下面我们就定制一个可以格式化时间的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>不满两位的填充0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">v</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillStr</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v &lt; <span class="number">10</span> ? <span class="string">'0'</span> + v : v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>d  时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>patten  格式文本   y 年；M 月；d 日；H 小时；m 分钟；s 秒；</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string&#125;</span>  </span>格式化以后的实践</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d, patten</span>) </span>&#123;</span><br><span class="line">    patten = patten || <span class="string">'y-M-d H:m:s'</span>;</span><br><span class="line">    <span class="keyword">var</span> date = d ? <span class="keyword">new</span> <span class="built_in">Date</span>(d) : <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> patten.replace(<span class="regexp">/y/g</span>, date.getFullYear())</span><br><span class="line">        .replace(<span class="regexp">/M/g</span>, fillStr(date.getMonth() + <span class="number">1</span>))</span><br><span class="line">        .replace(<span class="regexp">/d/g</span>, fillStr(date.getDate()))</span><br><span class="line">        .replace(<span class="regexp">/H/g</span>, fillStr(date.getHours()))</span><br><span class="line">        .replace(<span class="regexp">/m/g</span>, fillStr(date.getMinutes()))</span><br><span class="line">        .replace(<span class="regexp">/s/g</span>, fillStr(date.getSeconds()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是使用方法和返回的结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// usage</span></span><br><span class="line">formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="string">'y年M月d日'</span>);  <span class="comment">// 2017年05月03日</span></span><br><span class="line">formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// 2017-05-03 22:47:56</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动态加载js和css文件，抽时间优化]]></title>
      <url>/ckilas0j3005l0xqifbra5rfe/</url>
      <content type="html"><![CDATA[<p>其实下面就做了一个类似require.js的实现；</p>
<p>有的场景我们需要把一些库封装起来，对外提供一个名字去加载，这样做的目的就是将库和页面分开，页面不直接依赖于库的某一个文件，只需要知道库的名字就可以了；</p>
<p>1、 首先我们需要定义一个库对应的js和css文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> libs = &#123;</span><br><span class="line">    echarts: &#123;</span><br><span class="line">        js: [<span class="string">'js/libs/echarts.min.js'</span>, <span class="string">'js/echarts-utils.js'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    picker: &#123;</span><br><span class="line">        js: [<span class="string">'js/libs/mui.picker.js'</span>, <span class="string">'js/libs/mui.poppicker.js'</span>],</span><br><span class="line">        css: [<span class="string">'css/mui.picker.css'</span>, <span class="string">'css/mui.poppicker.css'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    sceneHeader: &#123;</span><br><span class="line">        js: [<span class="string">'js/element/scene-header.js'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2、 接下来我们写一个加载js和css的方法，这里js需要同步加载，否则会导致依赖不全<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载js文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>name 文件的名字，其实叫url更加合适</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>callback  回调函数，不管是否加载成功都会处理回调，作用是计数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addJScript</span>(<span class="params">name, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sc = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    sc.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    sc.src = name;</span><br><span class="line">    sc.async = <span class="literal">false</span>;  <span class="comment">//  异步加载关闭</span></span><br><span class="line">    sc.addEventListener(<span class="string">'load'</span>, callback || $.noop, <span class="literal">false</span>);</span><br><span class="line">    sc.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[DEBUG] '</span> + name + <span class="string">'加载失败。'</span>);</span><br><span class="line">        callback &amp;&amp; callback();</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'head'</span>).appendChild(sc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载css文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>name 文件的名字，其实叫url更加合适</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>callback  回调函数，不管是否加载成功都会处理回调，作用是计数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCss</span>(<span class="params">name, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">    link.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line">    link.href = name;</span><br><span class="line">    link.addEventListener(<span class="string">'load'</span>, callback || $.noop, <span class="literal">false</span>);</span><br><span class="line">    link.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        callback &amp;&amp; callback(); <span class="comment">//  callback计数</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'[DEBUG] '</span> + name + <span class="string">'加载失败。'</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'head'</span>).appendChild(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、 最后我们定义加载库的方法，我这里直接挂在$对象上的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>获取文件网页根目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.location.href.split(<span class="string">'dist/'</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>加载组件库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">libName</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>callback 加载完成的回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$.loadLib = <span class="function"><span class="keyword">function</span> (<span class="params">libName, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> libNames = <span class="built_in">Array</span>.isArray(libName) ? libName : [libName];  <span class="comment">//  将所有的库转化成数组</span></span><br><span class="line">    <span class="keyword">var</span> fileCount = <span class="number">0</span>;  <span class="comment">//  所有库的文件数量</span></span><br><span class="line">    <span class="keyword">var</span> loadedFileCount = <span class="number">0</span>;  <span class="comment">//  已经加载的文件数量</span></span><br><span class="line">    libNames.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lib = libs[name];</span><br><span class="line">        <span class="keyword">if</span> (lib) &#123;</span><br><span class="line">            fileCount += (lib.js || []).concat(lib.css || []).length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有找到名为的"'</span> + libName + <span class="string">'"库，目前支持的库：'</span> + <span class="built_in">Object</span>.keys(libs).join(<span class="string">','</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载完成才会处理回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadedFileCount++;</span><br><span class="line">        <span class="keyword">if</span> (loadedFileCount === fileCount) &#123;</span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载所有的库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    libNames.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> lib = libs[name];</span><br><span class="line">        <span class="keyword">if</span> (lib) &#123;</span><br><span class="line">            <span class="comment">// 先加载js文件,再加载css文件</span></span><br><span class="line">            (lib.js || []).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">                addJScript(getRoot() + s, loaded);</span><br><span class="line">            &#125;);</span><br><span class="line">            (lib.css || []).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">                addCss(getRoot() + c, loaded);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'没有找到名为的"'</span> + libName + <span class="string">'"库，目前支持的库：'</span> + <span class="built_in">Object</span>.keys(libs).join(<span class="string">','</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>4、 下面是我们使用的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.loadLib(<span class="string">'echarts'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  在这里使用就可以了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mui中使用vue遇到的各种问题]]></title>
      <url>/ckilas0i4003q0xqir4fyzqrp/</url>
      <content type="html"><![CDATA[<p>1、 把mui.init写到vue程序的mounted钩子上.</p>
<blockquote>
<p>因为vue代理了dom，dom没有初始化，所以mui.init的时候没有找到dom，就没有效果。</p>
</blockquote>
<p>2、 定义vue组件时，所有的属性必须是小写.</p>
<blockquote>
<p>组件中定义的属性是 aaBb 在标签上绑定的时候使用 aa-bb绑定，如果显示小写就是全小写</p>
</blockquote>
<a id="more"></a>
<p>3、 mui的下拉刷新在当出现以下布局的时候就不能使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.mui-pull-top-pocket</span> &#123;</span></span><br><span class="line">        top: 40px !important;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mui-action-back mui-icon mui-icon-left-nav mui-pull-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"mui-title"</span> <span class="attr">v-text</span>=<span class="string">"$t('title')"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu提示"您的当前网络有.local域,网络服务探测被禁用"]]></title>
      <url>/ckilas0ha001r0xqi0rayoqqa/</url>
      <content type="html"><![CDATA[<p>修改<code>/etc/default/avahi-daemon</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/avahi-daemon</span><br></pre></td></tr></table></figure>
<p>修改下面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># AVAHI_DAEMON_DETECT_LOCAL=1</span><br><span class="line">AVAHI_DAEMON_DETECT_LOCAL=0</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text在Ubuntu下不能输入中文]]></title>
      <url>/ckilas0h5001g0xqi1ethn3m8/</url>
      <content type="html"><![CDATA[<p>在Ubuntu下安装了fcitx和搜狗输入法不能输入中文，下面是解决方案。</p>
<p>下载代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gslnzfq/sublime-chinese.git</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>代码结构是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- bin</span><br><span class="line">    - subl                  # sublime的命令行快捷方式</span><br><span class="line">    - sublime_text.desktop  # sublime 的桌面快捷方式</span><br><span class="line">- lib</span><br><span class="line">    - libsublime-imfix.so   # 编译后的共享库</span><br><span class="line">- src</span><br><span class="line">    - sublime_imfix.c       # c代码，使用build.sh 编译到libsublime-imfix.so</span><br><span class="line">- build.sh                  # 编译脚本，sublime_imfix.c =&gt; libsublime-imfix.so</span><br></pre></td></tr></table></figure></p>
<p>操作：<br>1、 首先需要安装C++的编译环境，如果安装了就可以跳过，如果使用已经编译好的libsublime-imfix.so文件，也可以直接跳过了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libgtk2.0-dev</span><br></pre></td></tr></table></figure></p>
<p>2、 编译共享库到lib文件夹，如果使用已经编译好的libsublime-imfix.so文件，也可以直接跳过了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash build.sh <span class="comment">#  执行完成后lib/libsublime-imfix.so就是重新编译后的库</span></span><br></pre></td></tr></table></figure></p>
<p>3、 复制共享库libsublime-imfix.so到 /opt/sublime_text<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ./lib/libsublime-imfix.so /opt/sublime_text</span><br></pre></td></tr></table></figure></p>
<p>4、 将bin/subl 复制到 /usr/bin下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在命令行执行subl就可以输入中文了</span></span><br><span class="line">sudo cp ./bin/subl /usr/bin</span><br></pre></td></tr></table></figure></p>
<p>5、 让快捷方式打开也能输入中文，复制sublime_text.desktop到/usr/share/applications<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用快捷方式打开也可以输入中文了</span></span><br><span class="line">sudo cp ./bin/sublime_text.desktop /usr/share/applications</span><br></pre></td></tr></table></figure></p>
<p>6、 如果sublime_text快捷方式还是输入不了中文，请检查是否有其他的快捷方式并删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm ~/.<span class="built_in">local</span>/share/applications/sublime_text.desktop</span><br><span class="line"><span class="comment"># 就可以删除中文了</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编辑器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中List数据高效对比筛选]]></title>
      <url>/ckilas0gn000p0xqiwvzvplku/</url>
      <content type="html"><![CDATA[<p>在实际的开发中，经常会晕倒这样的问题，有两个List的数据，需要对这两个List的数据进行对比，然后筛选出需要的对象。</p>
<p>例如：财务中的对账,数据源一个是银行日记账（aList），一个是银行对帐单（bList），业务操作就是把两个List里面金额相同的记录筛选掉，剩下金额不相等的。</p>
<p>在实际开发中我目前知道有两个方式（假设两个List各有1000条数据）：</p>
<ol>
<li>最简单的就是用双重循环进行比较，虽然简单，但是如果两个List的数据量都很大，那么运行时间将成数量级增长。循环次数为1000*1000</li>
<li>把一个List通过循环放入Map中，把需要比较的字段作为Map的Key，然后循环另外一个List，到Map里面去匹配。</li>
</ol>
<a id="more"></a>
<p>Java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(A a : aList)&#123;  </span><br><span class="line">   map.put(a.amount,a);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(B b : bList)&#123;  </span><br><span class="line">   A a = map.get(b.amount);  </span><br><span class="line">   <span class="keyword">if</span>(a==<span class="keyword">null</span>)&#123;  </span><br><span class="line">      <span class="comment">//a==null则说明没有同b匹配的项  </span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">      <span class="comment">//a!=null则说明匹配上了  </span></span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于在Map中取数非常快，主要的耗时就在业务处理和循环上。循环次数为1000*2</p>
<p>但是第2种方法还是有不足的地方：</p>
<p>1、当比较的值有相同的时候，由于Key必须唯一，所以后面的值会覆盖掉前面的数据</p>
<p>2、当比较的内容比较复杂，或者是多项的时候，就比较难处理</p>
<p>我想在平时开发中大家应该都会遇到这样的问题吧，不知道大家有没有更好的方法来解决这个问题！！</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用sinopia搭建本地npm仓库]]></title>
      <url>/ckilas0is00570xqim80w89vq/</url>
      <content type="html"><![CDATA[<p>参考：<a href="http://www.tuicool.com/articles/UziA7ra" target="_blank" rel="noopener">http://www.tuicool.com/articles/UziA7ra</a><br>1、 全局安装sinopia,macOS/linux环境需要sudo权限;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install sinopia -g</span><br></pre></td></tr></table></figure>
<p>2、 运行sinopia启动服务器，端口默认是4873</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sinopia</span><br><span class="line">  warn  --- config file  - /opt/sinopia/config.yaml</span><br><span class="line">  warn  --- http address - http://localhost:4873/</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>3、 在局域网的服务器上使用ip+4873的形式是访问不了的，因为启动的localhost，所以我们修改 <code>/opt/sinopia/config.yaml</code> ,在最后一行加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen: 0.0.0.0:4873</span><br></pre></td></tr></table></figure>
<p>4、 使用sinopia启动就可以使用ip+4873访问了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sinopia</span><br><span class="line">  warn  --- config file  - /opt/sinopia/config.yaml</span><br><span class="line">  warn  --- http address - http://0.0.0.0:4873/</span><br></pre></td></tr></table></figure></p>
<p>该项目好像不维护了，后续可能会迁移到：<a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">verdaccio</a> </p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决ORA-28000]]></title>
      <url>/ckilas0jh006k0xqigbd632sw/</url>
      <content type="html"><![CDATA[<p>转载自：<a href="http://jingyan.baidu.com/article/75ab0bcbe3e258d6874db255.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/75ab0bcbe3e258d6874db255.html</a></p>
<p>在oracle中，连续十次尝试登陆不成功，那么此账户将会被锁定（lock）。当使用被锁定的账户登录时，系统会报错：ORA-28000: the account is locked。本文描述次错误的解决思路。<br>方法/步骤</p>
<ol>
<li>使用system或者sys账户登录，注意请以管理员身份登录。Sytem和sys的默认密码请在网上查找。本文以sys账户为例，sys的默认密码是：change_on_install  。</li>
<li>使用命令解锁用户。命令为：alter user username account unlock;其中username为被锁定的用户名。</li>
<li>重置用户密码。命令为：alter user username identified by password;其中username为用户名，password为新密码。</li>
<li>使用账户重新尝试登陆。如果命令全部执行成功，那么应该可以正常登陆系统。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[您应升级到 MySQL 5.5.0 或更高版本]]></title>
      <url>/ckilas0jd00690xqizy6jjlh3/</url>
      <content type="html"><![CDATA[<p>解决思路：<br>1、升级mysql版本。<br>2、降级phpmyadmin版本的检查。<br>因为我的CentOS是我常用版本，所以不想改。那就降级phpmyadmin版本中的检查。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /var/www/html/phpmyadmin/libraries/common.inc.php</span><br><span class="line"><span class="comment"># 50500</span></span><br><span class="line"><span class="keyword">if</span> (PMA_MYSQL_INT_VERSION &lt; 50500) &#123; <span class="comment">#</span></span><br><span class="line"><span class="comment"># 修改为 50100</span></span><br><span class="line"><span class="keyword">if</span> (PMA_MYSQL_INT_VERSION &lt; 50100) &#123;</span><br></pre></td></tr></table></figure>
<p>这样就把phpmyadmin的需求5.1.0了</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SecureCRT等连接linux虚拟机慢]]></title>
      <url>/ckilas0h3001c0xqi8948awxi/</url>
      <content type="html"><![CDATA[<p>一般是等待十几秒才连上<br>确认linux防火墙关闭的情况下<br>方法是修改<code>/etc/ssh/sshd_config</code>文件，添加(或者修改)一行:</p>
<blockquote>
<p>UseDNS no</p>
</blockquote>
<p>重启一下sshd服务器就可以解决了<br><a id="more"></a><br>现在连接inux服务器一般都是使用SSH远程连接的方式。最近新装了一台服务器，发现telnet时速度很快，ping时一切也正常，但SSH连接的时候却很慢。经过网上资料查询，大致是有以下几种原因：</p>
<p>1、SERVER的SSHD会去DNS查找访问的CLIENT IP的HOSTNAME，如果DNS不可用或者没有相关记录，就会消耗一段时间。</p>
<p>2、在authentication gssapi-with-mic有时候也会消耗一段时间<br>一、测试查找具体原因：</p>
<p>1、使用ssh -v host进行debug<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -v 192.168.100.10</span></span><br></pre></td></tr></table></figure></p>
<p>然后就会输出一大堆debug，通过debug信息就可以看到连接到什么地方被耽搁了<br>比如会显示如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[html] view plaincopyprint?debug1: Next authentication method: gssapi-with-mic</span><br><span class="line">debug1: Unspecified GSS failure. Minor code may provide more information</span><br><span class="line">No credentials cache found</span><br><span class="line">debug1: Next authentication method: gssapi-with-mic</span><br><span class="line">debug1: Unspecified GSS failure. Minor code may provide more information</span><br><span class="line">No credentials cache found</span><br></pre></td></tr></table></figure></p>
<p>2、检测连接时间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time ssh root@192.168.100.10 exit</span></span><br></pre></td></tr></table></figure></p>
<p>二、解决方法（建议一个个设置，因为每个人连接慢的原因都不一样）：</p>
<p>注意：修改之后记得重启sshd服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service sshd restart</span></span><br></pre></td></tr></table></figure></p>
<p>1、关闭DNS反向解析<br>在linux中，默认就是开启了SSH的反向DNS解析,这个会消耗大量时间，因此需要关闭。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br><span class="line">UseDNS=no</span><br></pre></td></tr></table></figure></p>
<p>在配置文件中，虽然UseDNS yes是被注释的，但默认开关就是yes<br>2、关闭SERVER上的GSS认证<br>在authentication gssapi-with-mic有很大的可能出现问题，因此关闭GSS认证可以提高ssh连接速度。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br><span class="line">GSSAPIAuthentication no</span><br></pre></td></tr></table></figure></p>
<p>3、修改server上nsswitch.conf文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/nsswitch.conf</span></span><br></pre></td></tr></table></figure></p>
<p>找到<br>hosts： files dns<br>改为<br>hosts：files<br>hosts： files dns这一行含义是对于访问的主机进行域名解析的顺序，是先访问file，也就是/etc/hosts文件，如果hosts中没有记录域名，则访问dns，进行域名解析，如果dns也无法访问，就会等待访问超时后返回，因此等待时间比较长。<br>注意：如果SERVER需要通过域名访问其他服务器，则需要保留此行。</p>
<p>4、修改SERVER上resolv.conf文件</p>
<p>4.1、删除/etc/resolv.conf中所有不使用的IP。</p>
<p>4.2、把nameserver全部删除，问题也能解决，但是服务器就无法上网了。</p>
<p>4.3、如果SERVER曾经配置过双网卡，则在该文件中会有一行目前不使用的IP地址，删除该行即可。</p>
<p>5、修改SERVER上hosts文件</p>
<p>在SERVER上/etc/hosts文件中把客户端的IP和HOSTNAME加入</p>
<p>6、打开SERVER上的IgnoreRhosts参数</p>
<p>IgnoreRhosts参数可以忽略以前登录过主机的记录，设置为yes后可以极大的提高连接速度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br><span class="line">IgnoreRhosts yes</span><br></pre></td></tr></table></figure></p>
<p>——————–以上的均在SERVER上设置，以下的均在CLIENT上设置———————–</p>
<p>7、修改客户端的hosts文件<br>将目标SERVER的IP和域名加上去,使得本机的DNS服务能解析目标地址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/hosts</span></span><br><span class="line">192.168.100.11  doiido.com</span><br></pre></td></tr></table></figure></p>
<p>注：hosts文件格式为’目标SERVER_IP 目标SERVER_NAME’。但是使用这个方法有一个弊端，如果需要给每台SERVER都添加一个域名解析。<br>8、修改客户端配置文件ssh_conf（注意，不是sshd_conf）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/ssh_conf</span></span><br></pre></td></tr></table></figure></p>
<p>找到<br>GSSAPIAuthentication yes<br>改为<br>GSSAPIAuthentication no</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建subversion服务器(CentOS)]]></title>
      <url>/ckilas0jf006d0xqi6w6lviah/</url>
      <content type="html"><![CDATA[<p>本文是基于centos6版本进行安装的。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>本系统采用为每个项目单独建一版本库的策略。配置文件，密码文件，访问控制文件等都放在版本库的conf目录下。<br>所以每次开始一个新项目都必须新建一个版本库，并重新配置各配置文件。还有很重要的一条，要求各组员重新配置客户端，包括服务器版本库路径，本地路径等信息。</p>
<h4 id="建立版本库目录"><a href="#建立版本库目录" class="headerlink" title="建立版本库目录"></a>建立版本库目录</h4><p>可建立多个，新建库后以下各项都需重新配置。注意区别安装目录与版本库目录,以下讲的都是版本库目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir –p /home/svn/repos</span><br><span class="line"><span class="comment">#类似可以创建 mkdir –p /home/svn/repos2 /home/svn/repos3</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="建立svn版本库-与上面目录对应"><a href="#建立svn版本库-与上面目录对应" class="headerlink" title="建立svn版本库(与上面目录对应)"></a>建立svn版本库(与上面目录对应)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create /home/svn/repos</span><br></pre></td></tr></table></figure>
<p>执行此命令后svn自动在repos目录下添加必须的配置文件.<br>注意: 版本库不同于一般的文件夹, 直接在操作系统上新建文件无法被SVN识别, 必须使用import等命令将文件导入版本库.<br>此为svn内部指令，create用于新建版本库。请使用svn help查看详细说明。</p>
<h4 id="修改版本库配置文件"><a href="#修改版本库配置文件" class="headerlink" title="修改版本库配置文件"></a>修改版本库配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/svn/repos/conf/svnserve.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>各参数功能在配置文件的注释中有说明, 此处配置如下:<br>[general]<br>anon-access = none # 使非授权用户无法访问<br>auth-access = write # 使授权用户有写权限<br>password-db = passwd # 指明密码文件路径<br>authz-db = authz # 访问控制文件<br>realm = /home/svn/repos # 认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字。<br>其它采用默认配置. 各语句都必须顶格写, 左侧不能留空格, 否则会出错.</p>
</blockquote>
<h4 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/svn/repos/conf/passwd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入以下内容：<br>[users]<br>username1 = password1<br>username2 = password2<br>可以添加多个，此为用户名密码对。</p>
</blockquote>
<h4 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/svn/repos/conf/authz</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此配置文件设置各用户的授权。<br>包括只读r，读写rw。没有列出的用户，则不允许访问。还可以对用户分组，具体请参考svn手册，以下是简单例子：</p>
<p>#对仓库repos根目录权限设置<br>[repos:/]<br>user1 = rw<br>user2 = r</p>
</blockquote>
<h4 id="使用import导入文件"><a href="#使用import导入文件" class="headerlink" title="使用import导入文件"></a>使用import导入文件</h4><p>新建好的版本库是空的，需要导入工作目录。<br>// 这条语句将把路径/home/user/code下找到的文件导入到你创建的 Subversion 仓库中去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn import /home/code/ file:///home/svn/repos/ -m “注释”</span><br></pre></td></tr></table></figure></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r /home/svn/</span><br><span class="line">svn checkout svn://ip/repos</span><br><span class="line"><span class="comment">#输入用户名密码即可</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu版koala启动失败libudev.so.0 not found on Ubuntu 14.04]]></title>
      <url>/ckilas0hv00370xqi6l08o5fe/</url>
      <content type="html"><![CDATA[<p>会显示某些库不存在，我们需要建立软链接，这个问题可能会在后续的版本尽心修复；</p>
<p>临时方案，在命令行执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /lib/x86_64-linux-gnu/libudev.so.1 /lib/x86_64-linux-gnu/libudev.so.0</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu开机自动挂载ntfs分区]]></title>
      <url>/ckilas0h8001o0xqirykin6u2/</url>
      <content type="html"><![CDATA[<p>在新的64位Ubuntu 12.04版本中 ntfs写入支持程序 不能正常运行。所以想Ubuntu自动挂载ntfs分区就要手动编辑/etc/fstab 文件。  /etc/fstab包含了挂在磁盘的必要信息，在系统启动时读入。</p>
<p>1、先用fdisk命令查看磁盘信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1   *           1         851     6835626   83  Linux</span><br><span class="line">/dev/sda2             852        4039    25607610    f  W95 Ext’d (LBA)</span><br><span class="line">/dev/sda5             945        2135     9566676    7  HPFS/NTFS</span><br><span class="line">/dev/sda6            2136        4039    15293848+   7  HPFS/NTFS</span><br><span class="line"></span><br><span class="line">/dev/sda5 和 /dev/sda6 是要挂载的两个ntfs分区。</span><br></pre></td></tr></table></figure>
<p>2、将以下内容添加到/etc/fstab 文件尾部，重启即可自动挂载NTFS分区了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda6 /media/my ntfs-3g defaults,locale=zh_CN.UTF-8 0 0</span><br><span class="line">/dev/sda5 /media/tools ntfs-3g defaults,locale=zh_CN.UTF-8 0 0</span><br></pre></td></tr></table></figure>
<p>3、最好的方式是安装ntfs-config软件去从页面上修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ntfs-config</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL搭建AB复制备份]]></title>
      <url>/ckilas0gt000u0xqil6sn7zt8/</url>
      <content type="html"><![CDATA[<p>1、安装两台Linux服务器；</p>
<p>2、使用ssh免密码登录(使用ssh-keygen -t rsa生成sshkey并将公钥导入authorized_keys文件中)；</p>
<p>3、关闭防火墙；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redhat/CentOS</span></span><br><span class="line">sudo iptables stop &amp;&amp; chkconfig iptables off</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>4、master：my.cnf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server_id = 1</span><br><span class="line">log-bin = binlog</span><br><span class="line">log-bin-index = binlog.index</span><br></pre></td></tr></table></figure>
<p>5、slave：my.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server_id = 2</span><br><span class="line">log-bin =master.log</span><br><span class="line"># relay_log = /usr/share/mysql/mysql-relay-bin</span><br><span class="line"># relay_log_index = /usr/share/mysql/mysql-relay-bin.index</span><br></pre></td></tr></table></figure></p>
<p>6、master查看binlog，需要在mysql的命令行执行；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flush tables with read lock;</span><br><span class="line">show master status; 得到binlog.000001,323</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure></p>
<p>7、slave绑定binlog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;192.168.2.114&apos;,master_port=3306,master_user=&apos;root&apos;,master_password=&apos;admin&apos;,master_log_file=&apos;binlog.000001&apos;,master_log_pos=323;</span><br></pre></td></tr></table></figure></p>
<p>8、查询slave的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure></p>
<p>9、在主库上操作，查看测试库</p>
<p>ERROR 1201 (HY000): Could not initialize master info structure; more error messages can be found in the MySQL error log</p>
<p>解决方案是：运行命令 stop slave;</p>
<p>成功执行后继续运行 reset slave;</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS单节点安装hadoop]]></title>
      <url>/ckilas0g300060xqi1o2ijx6m/</url>
      <content type="html"><![CDATA[<p>最近要用到一个hadoop环境，由于资源有限，本文参照官方文档安装了hadoop单节点．<br>参考地址：<a href="http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="noopener">http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html</a><br><strong>为了方便，本文直接在root下面安装，生产环境不建议使用root账户．</strong></p>
<p>运行环境：</p>
<ol>
<li>CentOS 6.9 i586</li>
<li>IP: 192.168.1.20</li>
</ol>
<a id="more"></a>
<p>下面分为下面几个步骤完成</p>
<ol>
<li><a href="#0">下载apache hadoop</a></li>
<li><a href="#1">安装系统必备的组件</a></li>
<li><a href="#2">配置linux免密码ssh登录</a></li>
<li><a href="#3">安装jdk1.8并做相关的配置</a></li>
<li><a href="#4">安装hadoop并配置</a></li>
<li><a href="#5">使用webhdfs查看文件系统</a></li>
</ol>
<p><a name="0"></a></p>
<h3 id="下载apache-hadoop"><a href="#下载apache-hadoop" class="headerlink" title="下载apache hadoop"></a>下载apache hadoop</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果显示 -bash: wget: command not found 请执行 yum install wget　安装</span></span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz</span><br><span class="line"><span class="comment"># 我习惯把自己安装的软件放在opt下面，如果移动失败，可能没有权限，请切换到root执行：chmod 777 -R /opt/</span></span><br><span class="line">mv hadoop-2.8.1.tar.gz /opt/</span><br></pre></td></tr></table></figure>
<p><a name="1"></a></p>
<h3 id="安装系统必备的组件"><a href="#安装系统必备的组件" class="headerlink" title="安装系统必备的组件"></a>安装系统必备的组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install ssh rsync</span><br><span class="line"><span class="comment"># 下载完成后，请使用下面的命令测试</span></span><br><span class="line">ssh</span><br><span class="line"><span class="comment"># 显示下面类似的结果，说明安装成功</span></span><br><span class="line">usage: ssh [-1246AaCfgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</span><br><span class="line">           [-D [bind_address:]port] [-e escape_char] [-F configfile]</span><br><span class="line">           [-I pkcs11] [-i identity_file]</span><br><span class="line">           [-L [bind_address:]port:host:hostport]</span><br><span class="line">           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]</span><br><span class="line">           [-R [bind_address:]port:host:hostport] [-S ctl_path]</span><br><span class="line">           [-W host:port] [-w local_tun[:remote_tun]]</span><br><span class="line">           [user@]hostname [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure>
<p><a name="2"></a></p>
<h3 id="配置linux免密码ssh登录"><a href="#配置linux免密码ssh登录" class="headerlink" title="配置linux免密码ssh登录"></a>配置linux免密码ssh登录</h3><p>使用下面的，生成ssh公私密钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一路回车就好了，其实我也是新手　*_*</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 执行效果是这样子的</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">d6:b9:15:d5:3f:0b:01:f6:f4:3f:04:9b:9d:bc:07:01 root@linux32</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|           oE+o. |</span></span><br><span class="line"><span class="string">|          . ooB.o|</span></span><br><span class="line"><span class="string">|            .+o*.|</span></span><br><span class="line"><span class="string">|         . . o.o+|</span></span><br><span class="line"><span class="string">|        S o . .o=|</span></span><br><span class="line"><span class="string">|       .   o   .o|</span></span><br><span class="line"><span class="string">|          .      |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure></p>
<p>查看<code>~/.ssh</code>下面已经生成了id_rsa和id_rsa.pub文件，前者是私钥匙，后者是公钥，现在开始授权自动登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在.ssh目录下执行</span></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"><span class="comment">#给authorized_keys设置权限，这个很重要的</span></span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></p>
<p>使用ssh连接自己测试，不需要输入密码就可以登录进去了，第一次可能会有一个提问，输入yes回车即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure></p>
<p><a name="3"></a></p>
<h3 id="安装jdk1-8并做相关的配置"><a href="#安装jdk1-8并做相关的配置" class="headerlink" title="安装jdk1.8并做相关的配置"></a>安装jdk1.8并做相关的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将jdk解压到jdk1.8.0_144,然后添加环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export JAVA_HOME=/opt/jdk1.8.0_144"</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure>
<p><a name="4"></a></p>
<h3 id="安装hadoop并配置"><a href="#安装hadoop并配置" class="headerlink" title="安装hadoop并配置"></a>安装hadoop并配置</h3><p>设置环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将hadoop解压到hadoop-2.8.1文件夹</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export HADOOP_HOME=/opt/hadoop-2.8.1"</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="comment">#导出PATH变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=\$PATH:\$JAVA_HOME/bin:\$HADOOP_HOME/bin:\$HADOOP_HOME/sbin"</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="comment">#刷新环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p>
<p>修改<code>$HADOOP_HOME/etc/hadoop/hadoop-env.sh</code>中的JAVA_HOME指向，修改为本机的JAVA_HOME，大约是25行左右<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.8.0_144</span><br></pre></td></tr></table></figure></p>
<p>配置单节点，修改<code>$HADOOP_HOME/etc/hadoop/core-site.xml</code>,追加下面的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.1.20:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要在/opt/hadoop-2.8.1手动创建hadoop_tmp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop-2.8.1/hadoop_tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>修改<code>$HADOOP_HOME/etc/hadoop/hdfs-site.xml</code>,追加下面的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>使用下面的命令格式化文件系统并启动hdfs,启动之前必须在/etc/hosts中绑定主机名，否则会启动失败<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加映射,我的主机名是linux32</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"192.168.1.20 linux32"</span>　&gt;&gt; /etc/hosts &amp;&amp; service network restart</span><br><span class="line">hdfs namenode -format</span><br><span class="line">start-dfs.sh</span><br><span class="line"><span class="comment">#启动成功了，使用jps检查是否成功</span></span><br><span class="line">2609 SecondaryNameNode</span><br><span class="line">2453 DataNode</span><br><span class="line">2332 NameNode</span><br><span class="line">2717 Jps</span><br></pre></td></tr></table></figure></p>
<p><a name="5"></a></p>
<h3 id="使用webhdfs查看文件系统（如果访问不到，请查看防火墙是否允许50070端口）"><a href="#使用webhdfs查看文件系统（如果访问不到，请查看防火墙是否允许50070端口）" class="headerlink" title="使用webhdfs查看文件系统（如果访问不到，请查看防火墙是否允许50070端口）"></a>使用webhdfs查看文件系统（如果访问不到，请查看防火墙是否允许50070端口）</h3><p><img src="https://gitee.com/fqzhang/web-assets/raw/master/uPic/005.png" alt="webhdfs展示"></p>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>1、You have loaded library /opt/hadoop-2.8.1/lib/native/libhadoop.so.1.0.0 which might have disabled stack guard. The VM will try to fix the stack guard now</p>
<p><a href="http://www.linuxidc.com/Linux/2014-04/100934p3.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2014-04/100934p3.htm</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在hadoop-env.sh和yarn-env.sh中添加如下两行：</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$&#123;HADOOP_PREFIX&#125;/lib/native</span><br><span class="line">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_PREFIX/lib&quot;</span><br></pre></td></tr></table></figure>
<p>2、namenode没有办法启动</p>
<p>最近遇到了一个问题，执行start-all.sh的时候发现JPS一下namenode没有启动</p>
<p>每次开机都得重新格式化一下namenode才可以</p>
<p>其实问题就出在tmp文件，默认的tmp文件每次重新开机会被清空，与此同时namenode的格式化信息就会丢失</p>
<p>于是我们得重新配置一个tmp文件目录</p>
<p>首先在home目录下建立一个hadoop_tmp目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir ~/hadoop_tmp</span><br></pre></td></tr></table></figure>
<p>然后修改hadoop/conf目录里面的core-site.xml文件，加入以下节点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/chjzh/hadoop_tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意：我的用户是chjzh所以目录是/home/chjzh/hadoop_tmp</p>
<p>OK了，重新格式化Namenode<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure></p>
<p>然后启动hadoop<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure></p>
<p>执行下JPS命令就可以看到NameNode了</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS生成随机数]]></title>
      <url>/ckilas0gj000m0xqi9m4wjv4q/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果你希望生成任意值到任意值的随机数，公式就是这样的：</span></span><br><span class="line"><span class="comment">// max - 期望的最大值</span></span><br><span class="line"><span class="comment">// min - 期望的最小值</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>)+min,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>)+min);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AngularJS中$http服务在IE中缓存处理]]></title>
      <url>/ckilas0fq00000xqicvebq2kd/</url>
      <content type="html"><![CDATA[<p>我们在项目中会很频繁的用到获取实时数据的形式展示界面，由于每次请求的url，参数都是一样的，在ie中就出现了缓存下来的问题。</p>
<p>下面我们通过配置$httpProvider修改默认的$http请求。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.config([<span class="string">'$httpProvider'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$httpProvider</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 初始化$httpProvider的get请求配置</span></span><br><span class="line">     $httpProvider.defaults.headers.get = $httpProvider.defaults.headers.get || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 修改请求默认值，不允许缓存</span></span><br><span class="line">     $httpProvider.defaults.headers.get[<span class="string">'Cache-Control'</span>] = <span class="string">'no-cache'</span>;</span><br><span class="line">     $httpProvider.defaults.headers.get[<span class="string">'Pragma'</span>] = <span class="string">'no-cache'</span>;</span><br><span class="line"> &#125;]);</span><br></pre></td></tr></table></figure>
<p>再次在ie浏览器运行，相同的参数，每次获取的数据都是不一样的了，说明我们的配置生效了。</p>
<p>当然我们可以在所有的<strong>get请求后面拼接时间戳参数</strong>，来保证每次的请求都是不同的。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> angularjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[white-space处理断行]]></title>
      <url>/ckilas0ie004c0xqije66g4y8/</url>
      <content type="html"><![CDATA[<h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><p>空白的处理方式，不止两个属性值，但在 IE6 中只支持这两个，所以不介绍其他的。</p>
<ul>
<li>normal 多个连续英文空格压缩为一个英文空格显示，在空白处可换行。  </li>
<li>nowrap 强制在同一行内显示所有文本，直到文本结束或者遭遇 br 对象。</li>
</ul>
<a id="more"></a>
<h2 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h2><p>内容超过容器边界时是否断开转行。</p>
<ul>
<li>normal 允许（只是允许，不是必须）内容顶开指定的容器边界。  </li>
<li>break-word 内容将在边界内换行。</li>
</ul>
<h2 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h2><p>换行的方式。</p>
<ul>
<li>normal 英文在标点和空白处换行，中文在任何地方换行。  </li>
<li>break-all 英文和中文都在任何地方换行，比如从一个英文单词的中间拆开换行。  </li>
<li>keep-all 英文和中文都在标点和空白处换行。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS最小安装setuptools安装]]></title>
      <url>/ckilas0g600080xqikfte4w2o/</url>
      <content type="html"><![CDATA[<h3 id="1、安装网络管理工具"><a href="#1、安装网络管理工具" class="headerlink" title="1、安装网络管理工具"></a>1、安装网络管理工具</h3><p>最小化安装的centos是没有图形化配置网络的应用的，也就是我们常说的setup；</p>
<p>那现在那安装setuptool吧，可以节省很多系统管理的时间。</p>
<p># 安装setuptool</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install setuptool</span><br></pre></td></tr></table></figure>
<p># 可以发现执行setup后不全，再安装一个用于系统服务管理  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ntsysv</span><br></pre></td></tr></table></figure>
<p># 再安装个防火墙，以及setup中配套的防火墙设置、网络设置  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables</span><br></pre></td></tr></table></figure>
<p># 安装setup中配套的防火墙设置  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install system-config-securitylevel-tui</span><br></pre></td></tr></table></figure>
<p># 安装setup中配套的网络设置  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install system-config-network-tui</span><br></pre></td></tr></table></figure>
<p>然后就可以运行的setup了。</p>
<a id="more"></a>
<h3 id="2、安装中文语言包"><a href="#2、安装中文语言包" class="headerlink" title="2、安装中文语言包"></a>2、安装中文语言包</h3><p>centos安装过程中，安装语言包时选择了english，在安装完毕后浏览中文网页或查看中文文档时总是宣誓乱码，因此需要安装中文语言包，如果不能 从安装盘进行安装，可以通过yum进行安装。</p>
<p>yum可以安装一个分组，包括该语言所有的功能和设置，使用下面的命令；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &lt;language&gt;-support</span><br></pre></td></tr></table></figure></p>
<p>在上面的命令中，<language> 是下列之一: assamese, bengali, chinese, gujarati, hindi, japanese, kannada, korean, malayalam, marathi, oriya, punjabi, sinhala, tamil, thai, 或 telegu。</language></p>
<p>locale -a查看系统支持的语言<br>LANG=zh_CN.gb2312设置当前为中文，只对当时有效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure>
<p>将<code>LANG=&quot;zh_CN.UTF-8&quot;</code> 换成 <code>LANG=&quot;en_US.UTF-8&quot;</code></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS设置默认启动命令行]]></title>
      <url>/ckilas0g8000a0xqisyn9hzp3/</url>
      <content type="html"><![CDATA[<p>CentOS中如何进入图形界面和文字界面，Linux真正的服务器是不会运行图形化界面的，怎么样才能在不卸载桌面的前提下开机直接进入命令界面呢？（我安装的是CentOS 6.0）下面就简单介绍以下：</p>
<h3 id="一、如果要进入图形界面："><a href="#一、如果要进入图形界面：" class="headerlink" title="一、如果要进入图形界面："></a>一、如果要进入图形界面：</h3><p>1.首先得安装有图形界面，一般为X-window图形界面。<br>2.启动linux在终端下输入:startx 即可进入X11的图形操作界面。</p>
<a id="more"></a>
<h3 id="二、在图形界面还可以在多个界面中进行切换："><a href="#二、在图形界面还可以在多个界面中进行切换：" class="headerlink" title="二、在图形界面还可以在多个界面中进行切换："></a>二、在图形界面还可以在多个界面中进行切换：</h3><p>在X-window图形操作界面中按“Alt+Ctrl+功能键Fn n=1~6 ”就可以进入Console字符操作界面。按“Alt+Ctrl+F7”即可回到刚才的X-window中。</p>
<h3 id="三、如何每次都自动进入xwindos或者字符界面？"><a href="#三、如何每次都自动进入xwindos或者字符界面？" class="headerlink" title="三、如何每次都自动进入xwindos或者字符界面？"></a>三、如何每次都自动进入xwindos或者字符界面？</h3><p>开机后进入图形化界面还是进入命令行取决于inittab文件中的配置。该文件位于etc目录下。<br>打开/etc/inittab 文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/inittab</span><br></pre></td></tr></table></figure>
<p>在默认的 run level 设置中,可以看到第一行书写<br>默认的 run level 等级为 5,即图形 界面<br>将第一行的 5 修改为 3 即可。<br>保存文件后重启系统你就可以看见是启动的文本界面了。</p>
<p>另外在文本模式如果想启动图形界面，可以使用下面的方法（首先你安装了图形界面）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>
<p>运行级别（run level）的说明如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#   0 – halt (Do NOT set initdefault to this)</span><br><span class="line">#   1 – Single user mode</span><br><span class="line">#   2 – Multiuser, without NFS (The same as 3, if you do not have networking)</span><br><span class="line">#   3 – Full multiuser mode</span><br><span class="line">#   4 – unused</span><br><span class="line">#   5 – X11</span><br><span class="line">#   6 – reboot (Do NOT set initdefault to this)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
